{"version":3,"file":"NodeHandler.js","sourceRoot":"","sources":["NodeHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,2CAAuD;IACvD,mCAA8B;IAG9B;;;;OAIG;IACH,IAAY,aAGX;IAHD,WAAY,aAAa;QACxB,wCAAuB,CAAA;QACvB,kCAAiB,CAAA;IAClB,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;IAOD;QAAiC,uCAA4B;QAA7D;YAAA,qEA+BC;YA9BQ,cAAQ,GAAG,IAAI,aAAG,EAA4B,CAAC;;QA8BxD,CAAC;QA5BO,yBAAG,GAAV,UAAW,GAAoB;YAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAEM,yBAAG,GAAV,UAAW,GAAoB;YAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAEM,yBAAG,GAAV,UAAW,OAAgB,EAAE,GAAoB;YAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAG,GAAK,EAAE,CAAC,CAAC;QAC/B,CAAC;QAEM,6BAAO,GAAd;YACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3C,CAAC;QAEM,4BAAM,GAAb,UAAc,GAAoB;YACjC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;QAEM,kCAAY,GAAnB;YACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;QAC9C,CAAC;QAEM,2BAAK,GAAZ;YACC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;QACF,kBAAC;IAAD,CAAC,AA/BD,CAAiC,iBAAO,GA+BvC;IA/BY,kCAAW;IAiCxB,kBAAe,WAAW,CAAC","sourcesContent":["import { Evented, EventObject } from '../core/Evented';\nimport Map from '../shim/Map';\nimport { NodeHandlerInterface } from './interfaces';\n\n/**\n * Enum to identify the type of event.\n * Listening to 'Projector' will notify when projector is created or updated\n * Listening to 'Widget' will notify when widget root is created or updated\n */\nexport enum NodeEventType {\n\tProjector = 'Projector',\n\tWidget = 'Widget'\n}\n\nexport type NodeHandlerEventMap = {\n\tProjector: EventObject<NodeEventType.Projector>;\n\tWidget: EventObject<NodeEventType.Widget>;\n};\n\nexport class NodeHandler extends Evented<NodeHandlerEventMap> implements NodeHandlerInterface {\n\tprivate _nodeMap = new Map<string | number, Element>();\n\n\tpublic get(key: string | number): Element | undefined {\n\t\treturn this._nodeMap.get(key);\n\t}\n\n\tpublic has(key: string | number): boolean {\n\t\treturn this._nodeMap.has(key);\n\t}\n\n\tpublic add(element: Element, key: string | number): void {\n\t\tthis._nodeMap.set(key, element);\n\t\tthis.emit({ type: `${key}` });\n\t}\n\n\tpublic addRoot(): void {\n\t\tthis.emit({ type: NodeEventType.Widget });\n\t}\n\n\tpublic remove(key: string | number) {\n\t\tthis._nodeMap.delete(key);\n\t}\n\n\tpublic addProjector(): void {\n\t\tthis.emit({ type: NodeEventType.Projector });\n\t}\n\n\tpublic clear(): void {\n\t\tthis._nodeMap.clear();\n\t}\n}\n\nexport default NodeHandler;\n"]}