{"version":3,"file":"NodeHandler.mjs","sourceRoot":"","sources":["NodeHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAe,MAAM,iBAAiB,CAAC;AACvD,OAAO,GAAG,MAAM,aAAa,CAAC;AAG9B;;;;GAIG;AACH,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACxB,wCAAuB,CAAA;IACvB,kCAAiB,CAAA;AAClB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAOD,MAAM,OAAO,WAAY,SAAQ,OAA4B;IAA7D;;QACS,aAAQ,GAAG,IAAI,GAAG,EAA4B,CAAC;IA8BxD,CAAC;IA5BO,GAAG,CAAC,GAAoB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEM,GAAG,CAAC,GAAoB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEM,GAAG,CAAC,OAAgB,EAAE,GAAoB;QAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEM,OAAO;QACb,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,GAAoB;QACjC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEM,YAAY;QAClB,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9C,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACD;AAED,eAAe,WAAW,CAAC","sourcesContent":["import { Evented, EventObject } from '../core/Evented';\nimport Map from '../shim/Map';\nimport { NodeHandlerInterface } from './interfaces';\n\n/**\n * Enum to identify the type of event.\n * Listening to 'Projector' will notify when projector is created or updated\n * Listening to 'Widget' will notify when widget root is created or updated\n */\nexport enum NodeEventType {\n\tProjector = 'Projector',\n\tWidget = 'Widget'\n}\n\nexport type NodeHandlerEventMap = {\n\tProjector: EventObject<NodeEventType.Projector>;\n\tWidget: EventObject<NodeEventType.Widget>;\n};\n\nexport class NodeHandler extends Evented<NodeHandlerEventMap> implements NodeHandlerInterface {\n\tprivate _nodeMap = new Map<string | number, Element>();\n\n\tpublic get(key: string | number): Element | undefined {\n\t\treturn this._nodeMap.get(key);\n\t}\n\n\tpublic has(key: string | number): boolean {\n\t\treturn this._nodeMap.has(key);\n\t}\n\n\tpublic add(element: Element, key: string | number): void {\n\t\tthis._nodeMap.set(key, element);\n\t\tthis.emit({ type: `${key}` });\n\t}\n\n\tpublic addRoot(): void {\n\t\tthis.emit({ type: NodeEventType.Widget });\n\t}\n\n\tpublic remove(key: string | number) {\n\t\tthis._nodeMap.delete(key);\n\t}\n\n\tpublic addProjector(): void {\n\t\tthis.emit({ type: NodeEventType.Projector });\n\t}\n\n\tpublic clear(): void {\n\t\tthis._nodeMap.clear();\n\t}\n}\n\nexport default NodeHandler;\n"]}