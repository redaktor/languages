var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
/**
 * This Decorator is provided properties that define the behavior of a custom element, and
 * registers that custom element.
 */
export function customElement(config) {
    // rename "tag" to "tagName"
    const { tag: tagName } = config, configRest = __rest(config, ["tag"]);
    const userDefinedConfig = configRest;
    if (tagName) {
        userDefinedConfig.tagName = tagName;
    }
    return function (target) {
        target.__customElementDescriptor = Object.assign({}, target.__customElementDescriptor, userDefinedConfig);
    };
}
export default customElement;
//# sourceMappingURL=customElement.mjs.map