(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../vdom", "./cache", "./icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    var _this = this;
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../vdom");
    var cache_1 = require("./cache");
    var icache_1 = require("./icache");
    var blockFactory = vdom_1.create({ defer: vdom_1.defer, cache: cache_1.default, icache: icache_1.default });
    exports.block = blockFactory(function (_a) {
        var _b = _a.middleware, cache = _b.cache, icache = _b.icache, defer = _b.defer;
        var id = 1;
        return function (module) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var argsString = JSON.stringify(args);
                var moduleId = cache.get(module) || id++;
                cache.set(module, moduleId);
                var cachedValue = icache.getOrSet(moduleId + "-" + argsString, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var run, result;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                run = module.apply(void 0, tslib_1.__spread(args));
                                defer.pause();
                                return [4 /*yield*/, run];
                            case 1:
                                result = _a.sent();
                                defer.resume();
                                return [2 /*return*/, result];
                        }
                    });
                }); });
                return cachedValue || null;
            };
        };
    });
    exports.default = exports.block;
});
//# sourceMappingURL=block.js.map