export interface Breakpoints {
    [index: string]: number;
}
export declare function createBreakpointMiddleware(breakpoints?: Breakpoints): import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    resize: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, {
            get(key: string | number): HTMLElement | null;
        }>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
        icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
            cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
                destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
                    api: {};
                    properties: {};
                }>, (destroyFunction: () => void) => void>;
            }, {
                get<T = any>(key: any): T | undefined;
                set<T = any>(key: any, value: T): void;
                clear(): void;
            }>;
            invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
                api: {};
                properties: {};
            }>, () => void>;
        }, import("./icache").ICacheResult<void>>;
    }, {
        get(key: string | number): import("../../shim/ResizeObserver").DOMRectReadOnly | null;
    }>;
}, {
    get: (key: string | number, breakpoints?: Breakpoints) => {
        breakpoint: string;
        contentRect: import("../../shim/ResizeObserver").DOMRectReadOnly;
    } | null;
}>;
declare const breakpoint: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    resize: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, {
            get(key: string | number): HTMLElement | null;
        }>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
        icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
            cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
                destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
                    api: {};
                    properties: {};
                }>, (destroyFunction: () => void) => void>;
            }, {
                get<T = any>(key: any): T | undefined;
                set<T = any>(key: any, value: T): void;
                clear(): void;
            }>;
            invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
                api: {};
                properties: {};
            }>, () => void>;
        }, import("./icache").ICacheResult<void>>;
    }, {
        get(key: string | number): import("../../shim/ResizeObserver").DOMRectReadOnly | null;
    }>;
}, {
    get: (key: string | number, breakpoints?: Breakpoints) => {
        breakpoint: string;
        contentRect: import("../../shim/ResizeObserver").DOMRectReadOnly;
    } | null;
}>;
export default breakpoint;
