(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../vdom"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../vdom");
    var factory = vdom_1.create({ node: vdom_1.node });
    var defaultDimensions = {
        client: {
            height: 0,
            left: 0,
            top: 0,
            width: 0
        },
        offset: {
            height: 0,
            left: 0,
            top: 0,
            width: 0
        },
        position: {
            bottom: 0,
            left: 0,
            right: 0,
            top: 0
        },
        scroll: {
            height: 0,
            left: 0,
            top: 0,
            width: 0
        },
        size: {
            width: 0,
            height: 0
        }
    };
    exports.dimensions = factory(function (_a) {
        var node = _a.middleware.node;
        return {
            get: function (key) {
                var domNode = node.get(key);
                if (!domNode) {
                    return {
                        client: tslib_1.__assign({}, defaultDimensions.client),
                        offset: tslib_1.__assign({}, defaultDimensions.offset),
                        position: tslib_1.__assign({}, defaultDimensions.position),
                        scroll: tslib_1.__assign({}, defaultDimensions.scroll),
                        size: tslib_1.__assign({}, defaultDimensions.size)
                    };
                }
                var boundingDimensions = domNode.getBoundingClientRect();
                var result = {
                    client: {
                        height: domNode.clientHeight,
                        left: domNode.clientLeft,
                        top: domNode.clientTop,
                        width: domNode.clientWidth
                    },
                    offset: {
                        height: domNode.offsetHeight,
                        left: domNode.offsetLeft,
                        top: domNode.offsetTop,
                        width: domNode.offsetWidth
                    },
                    position: {
                        bottom: boundingDimensions.bottom,
                        left: boundingDimensions.left,
                        right: boundingDimensions.right,
                        top: boundingDimensions.top
                    },
                    scroll: {
                        height: domNode.scrollHeight,
                        left: domNode.scrollLeft,
                        top: domNode.scrollTop,
                        width: domNode.scrollWidth
                    },
                    size: {
                        width: boundingDimensions.width,
                        height: boundingDimensions.height
                    }
                };
                return result;
            }
        };
    });
    exports.default = exports.dimensions;
});
//# sourceMappingURL=dimensions.js.map