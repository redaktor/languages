import { FocusProperties } from '../mixins/Focus';
interface FocusState {
    previous: number;
    current: number;
}
export declare const focus: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties & FocusProperties, {
    icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
            destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
                api: {};
                properties: {};
            }>, (destroyFunction: () => void) => void>;
        }, {
            get<T = any>(key: any): T | undefined;
            set<T = any>(key: any, value: T): void;
            clear(): void;
        }>;
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
    }, import("./icache").ICacheResult<FocusState>>;
    cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        get<T = any>(key: any): T | undefined;
        set<T = any>(key: any, value: T): void;
        clear(): void;
    }>;
    diffProperty: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (propertyName: string, diff: (current: any, next: any) => void) => void>;
    node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        get(key: string | number): HTMLElement | null;
    }>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
}, {
    shouldFocus(): boolean;
    focus(): void;
    isFocused(key: string | number): boolean;
}>;
export default focus;
