import { Bundle, Messages } from '../../i18n/i18n';
import { I18nProperties, LocaleData, LocalizedMessages } from '../mixins/I18n';
export declare const i18n: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties & I18nProperties, {
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    injector: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => import("../RegistryHandler").RegistryHandler | null>;
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        subscribe(label: string | symbol, callback?: Function): (() => void) | undefined;
        get<T>(label: string | symbol): T | null;
    }>;
    getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => import("../RegistryHandler").RegistryHandler | null>;
}, {
    localize<T extends Messages>(bundle: Bundle<T>, useDefaults?: boolean): LocalizedMessages<T>;
    set(localeData?: LocaleData | undefined): void;
    get(): LocaleData | undefined;
}>;
export default i18n;
