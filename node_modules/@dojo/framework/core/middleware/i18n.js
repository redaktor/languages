(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../i18n/i18n", "../vdom", "./injector", "../../shim/Map", "../mixins/I18n"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /* tslint:disable:interface-name */
    var i18n_1 = require("../../i18n/i18n");
    var vdom_1 = require("../vdom");
    var injector_1 = require("./injector");
    var Map_1 = require("../../shim/Map");
    var I18n_1 = require("../mixins/I18n");
    var factory = vdom_1.create({ invalidator: vdom_1.invalidator, injector: injector_1.default, getRegistry: vdom_1.getRegistry }).properties();
    exports.i18n = factory(function (_a) {
        var properties = _a.properties, _b = _a.middleware, invalidator = _b.invalidator, injector = _b.injector, getRegistry = _b.getRegistry;
        var i18nInjector = injector.get(I18n_1.INJECTOR_KEY);
        if (!i18nInjector) {
            var registry = getRegistry();
            if (registry) {
                I18n_1.registerI18nInjector({}, registry.base);
            }
        }
        injector.subscribe(I18n_1.INJECTOR_KEY);
        function getLocaleMessages(bundle) {
            var locale = properties().locale;
            if (!locale) {
                var injectedLocale = injector.get(I18n_1.INJECTOR_KEY);
                if (injectedLocale) {
                    locale = injectedLocale.get().locale;
                }
            }
            locale = locale || i18n_1.default.locale;
            var localeMessages = i18n_1.getCachedMessages(bundle, locale);
            if (localeMessages) {
                return localeMessages;
            }
            i18n_1.default(bundle, locale).then(function () {
                invalidator();
            });
        }
        function resolveBundle(bundle) {
            var i18nBundle = properties().i18nBundle;
            if (i18nBundle) {
                if (i18nBundle instanceof Map_1.default) {
                    i18nBundle = i18nBundle.get(bundle);
                    if (!i18nBundle) {
                        return bundle;
                    }
                }
                return i18nBundle;
            }
            return bundle;
        }
        function getBlankMessages(bundle) {
            var blank = {};
            return Object.keys(bundle.messages).reduce(function (blank, key) {
                blank[key] = '';
                return blank;
            }, blank);
        }
        return {
            localize: function (bundle, useDefaults) {
                if (useDefaults === void 0) { useDefaults = false; }
                var locale = properties().locale;
                bundle = resolveBundle(bundle);
                var messages = getLocaleMessages(bundle);
                var isPlaceholder = !messages;
                if (!locale) {
                    var injectedLocale = injector.get(I18n_1.INJECTOR_KEY);
                    if (injectedLocale) {
                        locale = injectedLocale.get().locale;
                    }
                }
                var format = isPlaceholder && !useDefaults
                    ? function () { return ''; }
                    : function (key, options) { return i18n_1.formatMessage(bundle, key, options, locale); };
                return Object.create({
                    format: format,
                    isPlaceholder: isPlaceholder,
                    messages: messages || (useDefaults ? bundle.messages : getBlankMessages(bundle))
                });
            },
            set: function (localeData) {
                var currentLocale = injector.get(I18n_1.INJECTOR_KEY);
                if (currentLocale) {
                    currentLocale.set(localeData);
                }
            },
            get: function () {
                var currentLocale = injector.get(I18n_1.INJECTOR_KEY);
                if (currentLocale) {
                    return currentLocale.get();
                }
            }
        };
    });
    exports.default = exports.i18n;
});
//# sourceMappingURL=i18n.js.map