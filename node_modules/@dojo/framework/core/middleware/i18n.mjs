/* tslint:disable:interface-name */
import i18nCore, { formatMessage, getCachedMessages } from '../../i18n/i18n';
import { create, invalidator, getRegistry } from '../vdom';
import injector from './injector';
import Map from '../../shim/Map';
import { INJECTOR_KEY, registerI18nInjector } from '../mixins/I18n';
const factory = create({ invalidator, injector, getRegistry }).properties();
export const i18n = factory(({ properties, middleware: { invalidator, injector, getRegistry } }) => {
    const i18nInjector = injector.get(INJECTOR_KEY);
    if (!i18nInjector) {
        const registry = getRegistry();
        if (registry) {
            registerI18nInjector({}, registry.base);
        }
    }
    injector.subscribe(INJECTOR_KEY);
    function getLocaleMessages(bundle) {
        let { locale } = properties();
        if (!locale) {
            const injectedLocale = injector.get(INJECTOR_KEY);
            if (injectedLocale) {
                locale = injectedLocale.get().locale;
            }
        }
        locale = locale || i18nCore.locale;
        const localeMessages = getCachedMessages(bundle, locale);
        if (localeMessages) {
            return localeMessages;
        }
        i18nCore(bundle, locale).then(() => {
            invalidator();
        });
    }
    function resolveBundle(bundle) {
        let { i18nBundle } = properties();
        if (i18nBundle) {
            if (i18nBundle instanceof Map) {
                i18nBundle = i18nBundle.get(bundle);
                if (!i18nBundle) {
                    return bundle;
                }
            }
            return i18nBundle;
        }
        return bundle;
    }
    function getBlankMessages(bundle) {
        const blank = {};
        return Object.keys(bundle.messages).reduce((blank, key) => {
            blank[key] = '';
            return blank;
        }, blank);
    }
    return {
        localize(bundle, useDefaults = false) {
            let { locale } = properties();
            bundle = resolveBundle(bundle);
            const messages = getLocaleMessages(bundle);
            const isPlaceholder = !messages;
            if (!locale) {
                const injectedLocale = injector.get(INJECTOR_KEY);
                if (injectedLocale) {
                    locale = injectedLocale.get().locale;
                }
            }
            const format = isPlaceholder && !useDefaults
                ? () => ''
                : (key, options) => formatMessage(bundle, key, options, locale);
            return Object.create({
                format,
                isPlaceholder,
                messages: messages || (useDefaults ? bundle.messages : getBlankMessages(bundle))
            });
        },
        set(localeData) {
            const currentLocale = injector.get(INJECTOR_KEY);
            if (currentLocale) {
                currentLocale.set(localeData);
            }
        },
        get() {
            const currentLocale = injector.get(INJECTOR_KEY);
            if (currentLocale) {
                return currentLocale.get();
            }
        }
    };
});
export default i18n;
//# sourceMappingURL=i18n.mjs.map