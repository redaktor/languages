export interface ICacheResult<S = void> {
    getOrSet: {
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? () => Promise<T> : () => Promise<S[T]>): void extends S ? undefined | T : undefined | S[T];
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? () => T : () => S[T]): void extends S ? T : S[T];
        <T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? T : S[T]): void extends S ? T : S[T];
    };
    get<T extends void extends S ? any : keyof S>(key: void extends S ? any : T): void extends S ? T | undefined : S[T] | undefined;
    set<T extends void extends S ? any : keyof S>(key: void extends S ? any : T, value: void extends S ? T : S[T]): void;
    clear(): void;
}
export declare function createICacheMiddleware<S = void>(): import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        get<T = any>(key: any): T | undefined;
        set<T = any>(key: any, value: T): void;
        clear(): void;
    }>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
}, ICacheResult<S>>;
export declare const icache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        get<T = any>(key: any): T | undefined;
        set<T = any>(key: any, value: T): void;
        clear(): void;
    }>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
}, ICacheResult<void>>;
export default icache;
