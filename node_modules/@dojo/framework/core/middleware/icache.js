(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../vdom", "./cache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /* tslint:disable:interface-name */
    var vdom_1 = require("../vdom");
    var cache_1 = require("./cache");
    var factory = vdom_1.create({ cache: cache_1.default, invalidator: vdom_1.invalidator });
    function createICacheMiddleware() {
        var icache = factory(function (_a) {
            var _b = _a.middleware, invalidator = _b.invalidator, cache = _b.cache;
            return {
                getOrSet: function (key, value) {
                    var cachedValue = cache.get(key);
                    if (!cachedValue) {
                        this.set(key, value);
                    }
                    cachedValue = cache.get(key);
                    if (!cachedValue || cachedValue.status === 'pending') {
                        return undefined;
                    }
                    return cachedValue.value;
                },
                get: function (key) {
                    var cachedValue = cache.get(key);
                    if (!cachedValue || cachedValue.status === 'pending') {
                        return undefined;
                    }
                    return cachedValue.value;
                },
                set: function (key, value) {
                    if (typeof value === 'function') {
                        value = value();
                        if (value && typeof value.then === 'function') {
                            cache.set(key, {
                                status: 'pending',
                                value: value
                            });
                            value.then(function (result) {
                                var cachedValue = cache.get(key);
                                if (cachedValue && cachedValue.value === value) {
                                    cache.set(key, {
                                        status: 'resolved',
                                        value: result
                                    });
                                    invalidator();
                                }
                            });
                            return;
                        }
                    }
                    cache.set(key, {
                        status: 'resolved',
                        value: value
                    });
                    invalidator();
                },
                clear: function () {
                    cache.clear();
                }
            };
        });
        return icache;
    }
    exports.createICacheMiddleware = createICacheMiddleware;
    exports.icache = createICacheMiddleware();
    exports.default = exports.icache;
});
//# sourceMappingURL=icache.js.map