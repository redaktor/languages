/* tslint:disable:interface-name */
import { create, invalidator } from '../vdom';
import cache from './cache';
const factory = create({ cache, invalidator });
export function createICacheMiddleware() {
    const icache = factory(({ middleware: { invalidator, cache } }) => {
        return {
            getOrSet(key, value) {
                let cachedValue = cache.get(key);
                if (!cachedValue) {
                    this.set(key, value);
                }
                cachedValue = cache.get(key);
                if (!cachedValue || cachedValue.status === 'pending') {
                    return undefined;
                }
                return cachedValue.value;
            },
            get(key) {
                const cachedValue = cache.get(key);
                if (!cachedValue || cachedValue.status === 'pending') {
                    return undefined;
                }
                return cachedValue.value;
            },
            set(key, value) {
                if (typeof value === 'function') {
                    value = value();
                    if (value && typeof value.then === 'function') {
                        cache.set(key, {
                            status: 'pending',
                            value
                        });
                        value.then((result) => {
                            const cachedValue = cache.get(key);
                            if (cachedValue && cachedValue.value === value) {
                                cache.set(key, {
                                    status: 'resolved',
                                    value: result
                                });
                                invalidator();
                            }
                        });
                        return;
                    }
                }
                cache.set(key, {
                    status: 'resolved',
                    value
                });
                invalidator();
            },
            clear() {
                cache.clear();
            }
        };
    });
    return icache;
}
export const icache = createICacheMiddleware();
export default icache;
//# sourceMappingURL=icache.mjs.map