(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../vdom"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../vdom");
    var injectorFactory = vdom_1.create({ getRegistry: vdom_1.getRegistry, invalidator: vdom_1.invalidator, destroy: vdom_1.destroy });
    exports.injector = injectorFactory(function (_a) {
        var _b = _a.middleware, getRegistry = _b.getRegistry, invalidator = _b.invalidator, destroy = _b.destroy;
        var handles = [];
        destroy(function () {
            var handle;
            while ((handle = handles.pop())) {
                handle.destroy();
            }
        });
        var registry = getRegistry();
        return {
            subscribe: function (label, callback) {
                if (callback === void 0) { callback = invalidator; }
                if (registry) {
                    var item = registry.getInjector(label);
                    if (item) {
                        var handle_1 = item.invalidator.on('invalidate', function () {
                            callback();
                        });
                        handles.push(handle_1);
                        return function () {
                            var index = handles.indexOf(handle_1);
                            if (index !== -1) {
                                handles.splice(index, 1);
                                handle_1.destroy();
                            }
                        };
                    }
                }
            },
            get: function (label) {
                if (registry) {
                    var item = registry.getInjector(label);
                    if (item) {
                        return item.injector();
                    }
                }
                return null;
            }
        };
    });
    exports.default = exports.injector;
});
//# sourceMappingURL=injector.js.map