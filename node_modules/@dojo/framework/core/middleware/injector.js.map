{"version":3,"file":"injector.js","sourceRoot":"","sources":["injector.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,gCAAoE;IAIpE,IAAM,eAAe,GAAG,aAAM,CAAC,EAAE,WAAW,oBAAA,EAAE,WAAW,oBAAA,EAAE,OAAO,gBAAA,EAAE,CAAC,CAAC;IAEzD,QAAA,QAAQ,GAAG,eAAe,CAAC,UAAC,EAAqD;YAAnD,kBAAiD,EAAnC,4BAAW,EAAE,4BAAW,EAAE,oBAAO;QACzF,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,OAAO,CAAC;YACP,IAAI,MAA0B,CAAC;YAC/B,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE;gBAChC,MAAM,CAAC,OAAO,EAAE,CAAC;aACjB;QACF,CAAC,CAAC,CAAC;QACH,IAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC/B,OAAO;YACN,SAAS,EAAT,UAAU,KAAoB,EAAE,QAAgC;gBAAhC,yBAAA,EAAA,sBAAgC;gBAC/D,IAAI,QAAQ,EAAE;oBACb,IAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACzC,IAAI,IAAI,EAAE;wBACT,IAAM,QAAM,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,YAAY,EAAE;4BAChD,QAAQ,EAAE,CAAC;wBACZ,CAAC,CAAC,CAAC;wBACH,OAAO,CAAC,IAAI,CAAC,QAAM,CAAC,CAAC;wBACrB,OAAO;4BACN,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,QAAM,CAAC,CAAC;4BACtC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gCACjB,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gCACzB,QAAM,CAAC,OAAO,EAAE,CAAC;6BACjB;wBACF,CAAC,CAAC;qBACF;iBACD;YACF,CAAC;YACD,GAAG,EAAH,UAAO,KAAoB;gBAC1B,IAAI,QAAQ,EAAE;oBACb,IAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAI,KAAK,CAAC,CAAC;oBAC5C,IAAI,IAAI,EAAE;wBACT,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;qBACvB;iBACD;gBACD,OAAO,IAAI,CAAC;YACb,CAAC;SACD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,kBAAe,gBAAQ,CAAC","sourcesContent":["import { create, getRegistry, invalidator, destroy } from '../vdom';\nimport { RegistryLabel } from '../interfaces';\nimport { Handle } from '../Destroyable';\n\nconst injectorFactory = create({ getRegistry, invalidator, destroy });\n\nexport const injector = injectorFactory(({ middleware: { getRegistry, invalidator, destroy } }) => {\n\tconst handles: Handle[] = [];\n\tdestroy(() => {\n\t\tlet handle: Handle | undefined;\n\t\twhile ((handle = handles.pop())) {\n\t\t\thandle.destroy();\n\t\t}\n\t});\n\tconst registry = getRegistry();\n\treturn {\n\t\tsubscribe(label: RegistryLabel, callback: Function = invalidator) {\n\t\t\tif (registry) {\n\t\t\t\tconst item = registry.getInjector(label);\n\t\t\t\tif (item) {\n\t\t\t\t\tconst handle = item.invalidator.on('invalidate', () => {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t\thandles.push(handle);\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst index = handles.indexOf(handle);\n\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\thandles.splice(index, 1);\n\t\t\t\t\t\t\thandle.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tget<T>(label: RegistryLabel): T | null {\n\t\t\tif (registry) {\n\t\t\t\tconst item = registry.getInjector<T>(label);\n\t\t\t\tif (item) {\n\t\t\t\t\treturn item.injector();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n});\n\nexport default injector;\n"]}