import { IntersectionResult, IntersectionGetOptions } from '../meta/Intersection';
export declare const intersection: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        get<T = any>(key: any): T | undefined;
        set<T = any>(key: any, value: T): void;
        clear(): void;
    }>;
    node: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, {
        get(key: string | number): HTMLElement | null;
    }>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
}, {
    get(key: string | number, options?: IntersectionGetOptions): IntersectionResult;
}>;
export default intersection;
