import WeakMap from '../../shim/WeakMap';
import IntersectionObserver from '../../shim/IntersectionObserver';
import { create, node, invalidator, destroy } from '../vdom';
import cache from './cache';
const defaultIntersection = Object.freeze({
    intersectionRatio: 0,
    isIntersecting: false
});
const factory = create({ cache, node, invalidator, destroy });
export const intersection = factory(({ middleware: { cache, node, invalidator, destroy } }) => {
    const handles = [];
    destroy(() => {
        let handle;
        while ((handle = handles.pop())) {
            handle && handle();
        }
    });
    function _createDetails(options, rootNode) {
        const entries = new WeakMap();
        const observer = new IntersectionObserver(_onIntersect(entries), Object.assign({}, options, { root: rootNode }));
        const details = Object.assign({ observer, entries }, options);
        cache.set(JSON.stringify(options), details);
        handles.push(() => observer.disconnect());
        return details;
    }
    function _getDetails(options = {}) {
        return cache.get(JSON.stringify(options));
    }
    function _onIntersect(detailEntries) {
        return (entries) => {
            for (const { intersectionRatio, isIntersecting, target } of entries) {
                detailEntries.set(target, { intersectionRatio, isIntersecting });
            }
            invalidator();
        };
    }
    return {
        get(key, options = {}) {
            let rootNode;
            if (options.root) {
                rootNode = node.get(options.root);
                if (!rootNode) {
                    return defaultIntersection;
                }
            }
            const domNode = node.get(key);
            if (!domNode) {
                return defaultIntersection;
            }
            let details = _getDetails(options) || _createDetails(options, rootNode);
            if (!details.entries.get(domNode)) {
                details.entries.set(domNode, defaultIntersection);
                details.observer.observe(domNode);
            }
            return details.entries.get(domNode) || defaultIntersection;
        }
    };
});
export default intersection;
//# sourceMappingURL=intersection.mjs.map