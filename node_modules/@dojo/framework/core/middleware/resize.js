(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../shim/ResizeObserver", "../vdom", "./icache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var ResizeObserver_1 = require("../../shim/ResizeObserver");
    var vdom_1 = require("../vdom");
    var icache_1 = require("./icache");
    var factory = vdom_1.create({ node: vdom_1.node, destroy: vdom_1.destroy, icache: icache_1.icache });
    exports.resize = factory(function (_a) {
        var _b = _a.middleware, node = _b.node, destroy = _b.destroy, icache = _b.icache;
        var keys = [];
        var handles = [];
        destroy(function () {
            var handle;
            while ((handle = handles.pop())) {
                handle && handle();
            }
        });
        return {
            get: function (key) {
                var domNode = node.get(key);
                if (!domNode) {
                    return null;
                }
                if (keys.indexOf(key) === -1) {
                    keys.push(key);
                    var resizeObserver_1 = new ResizeObserver_1.default(function (_a) {
                        var _b = tslib_1.__read(_a, 1), entry = _b[0];
                        icache.set(key, entry.contentRect);
                    });
                    resizeObserver_1.observe(domNode);
                    handles.push(function () { return resizeObserver_1.disconnect(); });
                }
                return icache.get(key) || null;
            }
        };
    });
    exports.default = exports.resize;
});
//# sourceMappingURL=resize.js.map