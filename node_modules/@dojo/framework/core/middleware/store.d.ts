import Store, { StatePaths, Path } from '../../stores/Store';
import { Process } from '../../stores/process';
export declare const createStoreMiddleware: <S = any>(initial?: ((store: Store<S>) => void) | undefined) => import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
    destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (destroyFunction: () => void) => void>;
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    injector: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => import("../RegistryHandler").RegistryHandler | null>;
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        subscribe(label: string | symbol, callback?: Function): (() => void) | undefined;
        get<T>(label: string | symbol): T | null;
    }>;
}, {
    get<U = any>(path: Path<S, U>): U;
    path: StatePaths<S>;
    at<U = any>(path: Path<S, U[]>, index: number): Path<S, U>;
    executor<T extends Process<any, any>>(process: T): ReturnType<T>;
}>;
export default createStoreMiddleware;
