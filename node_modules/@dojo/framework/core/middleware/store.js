(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../vdom", "../middleware/injector", "../../stores/Store"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../vdom");
    var injector_1 = require("../middleware/injector");
    var Store_1 = require("../../stores/Store");
    var factory = vdom_1.create({ destroy: vdom_1.destroy, invalidator: vdom_1.invalidator, injector: injector_1.default });
    exports.createStoreMiddleware = function (initial) {
        var store = new Store_1.default();
        var initialized = false;
        initial && initial(store);
        var storeMiddleware = factory(function (_a) {
            var _b = _a.middleware, destroy = _b.destroy, invalidator = _b.invalidator, injector = _b.injector;
            var handles = [];
            destroy(function () {
                var handle;
                while ((handle = handles.pop())) {
                    handle();
                }
            });
            if (!initialized) {
                var injectedStore = injector.get('state');
                if (injectedStore) {
                    store = injectedStore;
                }
                initialized = true;
            }
            var registeredPaths = [];
            var path = function (path) {
                var _a;
                var segments = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    segments[_i - 1] = arguments[_i];
                }
                return (_a = store).path.apply(_a, tslib_1.__spread([path], segments));
            };
            return {
                get: function (path) {
                    if (registeredPaths.indexOf(path.path) === -1) {
                        var handle_1 = store.onChange(path, function () {
                            invalidator();
                        });
                        handles.push(function () { return handle_1.remove(); });
                        registeredPaths.push(path.path);
                    }
                    return store.get(path);
                },
                path: path,
                at: function (path, index) {
                    return store.at(path, index);
                },
                executor: function (process) {
                    return process(store);
                }
            };
        });
        return storeMiddleware;
    };
    exports.default = exports.createStoreMiddleware;
});
//# sourceMappingURL=store.js.map