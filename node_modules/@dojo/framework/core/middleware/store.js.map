{"version":3,"file":"store.js","sourceRoot":"","sources":["store.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,gCAAuD;IACvD,mDAA8C;IAC9C,4CAA6D;IAG7D,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,OAAO,gBAAA,EAAE,WAAW,oBAAA,EAAE,QAAQ,oBAAA,EAAE,CAAC,CAAC;IAE9C,QAAA,qBAAqB,GAAG,UAAU,OAAmC;QACjF,IAAI,KAAK,GAAG,IAAI,eAAK,EAAK,CAAC;QAC3B,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAM,eAAe,GAAG,OAAO,CAAC,UAAC,EAAkD;gBAAhD,kBAA8C,EAAhC,oBAAO,EAAE,4BAAW,EAAE,sBAAQ;YAC9E,IAAM,OAAO,GAAU,EAAE,CAAC;YAC1B,OAAO,CAAC;gBACP,IAAI,MAAW,CAAC;gBAChB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE;oBAChC,MAAM,EAAE,CAAC;iBACT;YACF,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,WAAW,EAAE;gBACjB,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAW,OAAO,CAAC,CAAC;gBACtD,IAAI,aAAa,EAAE;oBAClB,KAAK,GAAG,aAAa,CAAC;iBACtB;gBACD,WAAW,GAAG,IAAI,CAAC;aACnB;YACD,IAAM,eAAe,GAAa,EAAE,CAAC;YACrC,IAAM,IAAI,GAAkB,UAAC,IAAS;;gBAAE,kBAAgB;qBAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;oBAAhB,iCAAgB;;gBACvD,OAAO,CAAA,KAAC,KAAa,CAAA,CAAC,IAAI,6BAAC,IAAI,GAAK,QAAQ,GAAE;YAC/C,CAAC,CAAC;YACF,OAAO;gBACN,GAAG,EAAH,UAAa,IAAgB;oBAC5B,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;wBAC9C,IAAM,QAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;4BACnC,WAAW,EAAE,CAAC;wBACf,CAAC,CAAC,CAAC;wBACH,OAAO,CAAC,IAAI,CAAC,cAAM,OAAA,QAAM,CAAC,MAAM,EAAE,EAAf,CAAe,CAAC,CAAC;wBACpC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAChC;oBACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;gBACD,IAAI,MAAA;gBACJ,EAAE,EAAF,UAAY,IAAkB,EAAE,KAAa;oBAC5C,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC9B,CAAC;gBACD,QAAQ,EAAR,UAAsC,OAAU;oBAC/C,OAAO,OAAO,CAAC,KAAK,CAAQ,CAAC;gBAC9B,CAAC;aACD,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACxB,CAAC,CAAC;IAEF,kBAAe,6BAAqB,CAAC","sourcesContent":["import { destroy, invalidator, create } from '../vdom';\nimport injector from '../middleware/injector';\nimport Store, { StatePaths, Path } from '../../stores/Store';\nimport { Process } from '../../stores/process';\n\nconst factory = create({ destroy, invalidator, injector });\n\nexport const createStoreMiddleware = <S = any>(initial?: (store: Store<S>) => void) => {\n\tlet store = new Store<S>();\n\tlet initialized = false;\n\tinitial && initial(store);\n\tconst storeMiddleware = factory(({ middleware: { destroy, invalidator, injector } }) => {\n\t\tconst handles: any[] = [];\n\t\tdestroy(() => {\n\t\t\tlet handle: any;\n\t\t\twhile ((handle = handles.pop())) {\n\t\t\t\thandle();\n\t\t\t}\n\t\t});\n\t\tif (!initialized) {\n\t\t\tconst injectedStore = injector.get<Store<S>>('state');\n\t\t\tif (injectedStore) {\n\t\t\t\tstore = injectedStore;\n\t\t\t}\n\t\t\tinitialized = true;\n\t\t}\n\t\tconst registeredPaths: string[] = [];\n\t\tconst path: StatePaths<S> = (path: any, ...segments: any) => {\n\t\t\treturn (store as any).path(path, ...segments);\n\t\t};\n\t\treturn {\n\t\t\tget<U = any>(path: Path<S, U>): U {\n\t\t\t\tif (registeredPaths.indexOf(path.path) === -1) {\n\t\t\t\t\tconst handle = store.onChange(path, () => {\n\t\t\t\t\t\tinvalidator();\n\t\t\t\t\t});\n\t\t\t\t\thandles.push(() => handle.remove());\n\t\t\t\t\tregisteredPaths.push(path.path);\n\t\t\t\t}\n\t\t\t\treturn store.get(path);\n\t\t\t},\n\t\t\tpath,\n\t\t\tat<U = any>(path: Path<S, U[]>, index: number) {\n\t\t\t\treturn store.at(path, index);\n\t\t\t},\n\t\t\texecutor<T extends Process<any, any>>(process: T): ReturnType<T> {\n\t\t\t\treturn process(store) as any;\n\t\t\t}\n\t\t};\n\t});\n\treturn storeMiddleware;\n};\n\nexport default createStoreMiddleware;\n"]}