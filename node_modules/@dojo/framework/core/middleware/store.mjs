import { destroy, invalidator, create } from '../vdom';
import injector from '../middleware/injector';
import Store from '../../stores/Store';
const factory = create({ destroy, invalidator, injector });
export const createStoreMiddleware = (initial) => {
    let store = new Store();
    let initialized = false;
    initial && initial(store);
    const storeMiddleware = factory(({ middleware: { destroy, invalidator, injector } }) => {
        const handles = [];
        destroy(() => {
            let handle;
            while ((handle = handles.pop())) {
                handle();
            }
        });
        if (!initialized) {
            const injectedStore = injector.get('state');
            if (injectedStore) {
                store = injectedStore;
            }
            initialized = true;
        }
        const registeredPaths = [];
        const path = (path, ...segments) => {
            return store.path(path, ...segments);
        };
        return {
            get(path) {
                if (registeredPaths.indexOf(path.path) === -1) {
                    const handle = store.onChange(path, () => {
                        invalidator();
                    });
                    handles.push(() => handle.remove());
                    registeredPaths.push(path.path);
                }
                return store.get(path);
            },
            path,
            at(path, index) {
                return store.at(path, index);
            },
            executor(process) {
                return process(store);
            }
        };
    });
    return storeMiddleware;
};
export default createStoreMiddleware;
//# sourceMappingURL=store.mjs.map