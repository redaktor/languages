{"version":3,"file":"store.mjs","sourceRoot":"","sources":["store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACvD,OAAO,QAAQ,MAAM,wBAAwB,CAAC;AAC9C,OAAO,KAA2B,MAAM,oBAAoB,CAAC;AAG7D,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;AAE3D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAU,OAAmC,EAAE,EAAE;IACrF,IAAI,KAAK,GAAG,IAAI,KAAK,EAAK,CAAC;IAC3B,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1B,MAAM,eAAe,GAAG,OAAO,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE;QACtF,MAAM,OAAO,GAAU,EAAE,CAAC;QAC1B,OAAO,CAAC,GAAG,EAAE;YACZ,IAAI,MAAW,CAAC;YAChB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE;gBAChC,MAAM,EAAE,CAAC;aACT;QACF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,EAAE;YACjB,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAW,OAAO,CAAC,CAAC;YACtD,IAAI,aAAa,EAAE;gBAClB,KAAK,GAAG,aAAa,CAAC;aACtB;YACD,WAAW,GAAG,IAAI,CAAC;SACnB;QACD,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,IAAI,GAAkB,CAAC,IAAS,EAAE,GAAG,QAAa,EAAE,EAAE;YAC3D,OAAQ,KAAa,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC;QACF,OAAO;YACN,GAAG,CAAU,IAAgB;gBAC5B,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC9C,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE;wBACxC,WAAW,EAAE,CAAC;oBACf,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;oBACpC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;gBACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;YACD,IAAI;YACJ,EAAE,CAAU,IAAkB,EAAE,KAAa;gBAC5C,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9B,CAAC;YACD,QAAQ,CAA8B,OAAU;gBAC/C,OAAO,OAAO,CAAC,KAAK,CAAQ,CAAC;YAC9B,CAAC;SACD,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,eAAe,CAAC;AACxB,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import { destroy, invalidator, create } from '../vdom';\nimport injector from '../middleware/injector';\nimport Store, { StatePaths, Path } from '../../stores/Store';\nimport { Process } from '../../stores/process';\n\nconst factory = create({ destroy, invalidator, injector });\n\nexport const createStoreMiddleware = <S = any>(initial?: (store: Store<S>) => void) => {\n\tlet store = new Store<S>();\n\tlet initialized = false;\n\tinitial && initial(store);\n\tconst storeMiddleware = factory(({ middleware: { destroy, invalidator, injector } }) => {\n\t\tconst handles: any[] = [];\n\t\tdestroy(() => {\n\t\t\tlet handle: any;\n\t\t\twhile ((handle = handles.pop())) {\n\t\t\t\thandle();\n\t\t\t}\n\t\t});\n\t\tif (!initialized) {\n\t\t\tconst injectedStore = injector.get<Store<S>>('state');\n\t\t\tif (injectedStore) {\n\t\t\t\tstore = injectedStore;\n\t\t\t}\n\t\t\tinitialized = true;\n\t\t}\n\t\tconst registeredPaths: string[] = [];\n\t\tconst path: StatePaths<S> = (path: any, ...segments: any) => {\n\t\t\treturn (store as any).path(path, ...segments);\n\t\t};\n\t\treturn {\n\t\t\tget<U = any>(path: Path<S, U>): U {\n\t\t\t\tif (registeredPaths.indexOf(path.path) === -1) {\n\t\t\t\t\tconst handle = store.onChange(path, () => {\n\t\t\t\t\t\tinvalidator();\n\t\t\t\t\t});\n\t\t\t\t\thandles.push(() => handle.remove());\n\t\t\t\t\tregisteredPaths.push(path.path);\n\t\t\t\t}\n\t\t\t\treturn store.get(path);\n\t\t\t},\n\t\t\tpath,\n\t\t\tat<U = any>(path: Path<S, U[]>, index: number) {\n\t\t\t\treturn store.at(path, index);\n\t\t\t},\n\t\t\texecutor<T extends Process<any, any>>(process: T): ReturnType<T> {\n\t\t\t\treturn process(store) as any;\n\t\t\t}\n\t\t};\n\t});\n\treturn storeMiddleware;\n};\n\nexport default createStoreMiddleware;\n"]}