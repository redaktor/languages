import { Theme, Classes, ClassNames } from '../mixins/Themed';
export interface ThemedProperties {
    theme?: Theme;
    classes?: Classes;
}
export declare const theme: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties & ThemedProperties, {
    invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => void>;
    cache: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        get<T = any>(key: any): T | undefined;
        set<T = any>(key: any, value: T): void;
        clear(): void;
    }>;
    diffProperty: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, (propertyName: string, diff: (current: any, next: any) => void) => void>;
    injector: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, {
        getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => import("../RegistryHandler").RegistryHandler | null>;
        invalidator: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, () => void>;
        destroy: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
            api: {};
            properties: {};
        }>, (destroyFunction: () => void) => void>;
    }, {
        subscribe(label: string | symbol, callback?: Function): (() => void) | undefined;
        get<T>(label: string | symbol): T | null;
    }>;
    getRegistry: import("../interfaces").MiddlewareResultFactory<import("../interfaces").WidgetProperties, import("../interfaces").MiddlewareMap<() => {
        api: {};
        properties: {};
    }>, () => import("../RegistryHandler").RegistryHandler | null>;
}, {
    classes<T extends ClassNames>(css: T): T;
    set(css: Theme): void;
    get(): Theme | undefined;
}>;
export default theme;
