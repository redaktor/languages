(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../vdom", "./cache", "./injector", "../../shim/Set", "../mixins/Themed", "../diff"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../vdom");
    var cache_1 = require("./cache");
    var injector_1 = require("./injector");
    var Set_1 = require("../../shim/Set");
    var Themed_1 = require("../mixins/Themed");
    var diff_1 = require("../diff");
    var factory = vdom_1.create({ invalidator: vdom_1.invalidator, cache: cache_1.default, diffProperty: vdom_1.diffProperty, injector: injector_1.default, getRegistry: vdom_1.getRegistry }).properties();
    exports.theme = factory(function (_a) {
        var _b = _a.middleware, invalidator = _b.invalidator, cache = _b.cache, diffProperty = _b.diffProperty, injector = _b.injector, getRegistry = _b.getRegistry, properties = _a.properties;
        var themeKeys = new Set_1.default();
        diffProperty('theme', function (current, next) {
            if (current.theme !== next.theme) {
                cache.clear();
                invalidator();
            }
        });
        diffProperty('classes', function (current, next) {
            var result = false;
            if ((current.classes && !next.classes) || (!current.classes && next.classes)) {
                result = true;
            }
            else if (current.classes && next.classes) {
                var keys = tslib_1.__spread(themeKeys.values());
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    result = diff_1.shallow(current.classes[key], next.classes[key], 1).changed;
                    if (result) {
                        break;
                    }
                }
            }
            if (result) {
                cache.clear();
                invalidator();
            }
        });
        var themeInjector = injector.get(Themed_1.INJECTED_THEME_KEY);
        if (!themeInjector) {
            var registry = getRegistry();
            if (registry) {
                Themed_1.registerThemeInjector(undefined, registry.base);
            }
        }
        injector.subscribe(Themed_1.INJECTED_THEME_KEY, function () {
            cache.clear();
            invalidator();
        });
        return {
            classes: function (css) {
                var theme = cache.get(css);
                if (theme) {
                    return theme;
                }
                var _a = Themed_1.THEME_KEY, key = css[_a], classes = tslib_1.__rest(css, [typeof _a === "symbol" ? _a : _a + ""]);
                themeKeys.add(key);
                theme = classes;
                var _b = properties(), currentTheme = _b.theme, currentClasses = _b.classes;
                if (!currentTheme) {
                    var injectedTheme = injector.get(Themed_1.INJECTED_THEME_KEY);
                    currentTheme = injectedTheme ? injectedTheme.get() : undefined;
                }
                if (currentTheme && currentTheme[key]) {
                    theme = tslib_1.__assign({}, theme, currentTheme[key]);
                }
                if (currentClasses && currentClasses[key]) {
                    var classKeys = Object.keys(currentClasses[key]);
                    for (var i = 0; i < classKeys.length; i++) {
                        var classKey = classKeys[i];
                        if (theme[classKey]) {
                            theme[classKey] = theme[classKey] + " " + currentClasses[key][classKey].join(' ');
                        }
                    }
                }
                cache.set(css, theme);
                return theme;
            },
            set: function (css) {
                var currentTheme = injector.get(Themed_1.INJECTED_THEME_KEY);
                if (currentTheme) {
                    currentTheme.set(css);
                }
            },
            get: function () {
                var currentTheme = injector.get(Themed_1.INJECTED_THEME_KEY);
                if (currentTheme) {
                    return currentTheme.get();
                }
            }
        };
    });
    exports.default = exports.theme;
});
//# sourceMappingURL=theme.js.map