{"version":3,"file":"theme.js","sourceRoot":"","sources":["theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { create, invalidator, diffProperty, getRegistry } from '../vdom';\nimport cache from './cache';\nimport injector from './injector';\nimport Injector from '../Injector';\nimport Set from '../../shim/Set';\nimport { registerThemeInjector, Theme, Classes, ClassNames, INJECTED_THEME_KEY, THEME_KEY } from '../mixins/Themed';\nimport { shallow } from '../diff';\n\nexport interface ThemedProperties {\n\ttheme?: Theme;\n\tclasses?: Classes;\n}\n\nconst factory = create({ invalidator, cache, diffProperty, injector, getRegistry }).properties<ThemedProperties>();\n\nexport const theme = factory(\n\t({ middleware: { invalidator, cache, diffProperty, injector, getRegistry }, properties }) => {\n\t\tlet themeKeys = new Set();\n\t\tdiffProperty('theme', (current: ThemedProperties, next: ThemedProperties) => {\n\t\t\tif (current.theme !== next.theme) {\n\t\t\t\tcache.clear();\n\t\t\t\tinvalidator();\n\t\t\t}\n\t\t});\n\t\tdiffProperty('classes', (current: ThemedProperties, next: ThemedProperties) => {\n\t\t\tlet result = false;\n\t\t\tif ((current.classes && !next.classes) || (!current.classes && next.classes)) {\n\t\t\t\tresult = true;\n\t\t\t} else if (current.classes && next.classes) {\n\t\t\t\tconst keys = [...themeKeys.values()];\n\t\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\t\tlet key = keys[i];\n\t\t\t\t\tresult = shallow(current.classes[key], next.classes[key], 1).changed;\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result) {\n\t\t\t\tcache.clear();\n\t\t\t\tinvalidator();\n\t\t\t}\n\t\t});\n\n\t\tconst themeInjector = injector.get(INJECTED_THEME_KEY);\n\t\tif (!themeInjector) {\n\t\t\tconst registry = getRegistry();\n\t\t\tif (registry) {\n\t\t\t\tregisterThemeInjector(undefined, registry.base);\n\t\t\t}\n\t\t}\n\t\tinjector.subscribe(INJECTED_THEME_KEY, () => {\n\t\t\tcache.clear();\n\t\t\tinvalidator();\n\t\t});\n\t\treturn {\n\t\t\tclasses<T extends ClassNames>(css: T): T {\n\t\t\t\tlet theme = cache.get(css);\n\t\t\t\tif (theme) {\n\t\t\t\t\treturn theme;\n\t\t\t\t}\n\t\t\t\tconst { [THEME_KEY]: key, ...classes } = css;\n\t\t\t\tthemeKeys.add(key);\n\t\t\t\ttheme = classes as T;\n\t\t\t\tlet { theme: currentTheme, classes: currentClasses } = properties();\n\t\t\t\tif (!currentTheme) {\n\t\t\t\t\tconst injectedTheme = injector.get<Injector<Theme>>(INJECTED_THEME_KEY);\n\t\t\t\t\tcurrentTheme = injectedTheme ? injectedTheme.get() : undefined;\n\t\t\t\t}\n\t\t\t\tif (currentTheme && currentTheme[key]) {\n\t\t\t\t\ttheme = { ...theme, ...currentTheme[key] };\n\t\t\t\t}\n\t\t\t\tif (currentClasses && currentClasses[key]) {\n\t\t\t\t\tconst classKeys = Object.keys(currentClasses[key]);\n\t\t\t\t\tfor (let i = 0; i < classKeys.length; i++) {\n\t\t\t\t\t\tconst classKey = classKeys[i];\n\t\t\t\t\t\tif (theme[classKey]) {\n\t\t\t\t\t\t\ttheme[classKey] = `${theme[classKey]} ${currentClasses[key][classKey].join(' ')}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcache.set(css, theme);\n\t\t\t\treturn theme;\n\t\t\t},\n\t\t\tset(css: Theme): void {\n\t\t\t\tconst currentTheme = injector.get<Injector<Theme | undefined>>(INJECTED_THEME_KEY);\n\t\t\t\tif (currentTheme) {\n\t\t\t\t\tcurrentTheme.set(css);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget(): Theme | undefined {\n\t\t\t\tconst currentTheme = injector.get<Injector<Theme | undefined>>(INJECTED_THEME_KEY);\n\t\t\t\tif (currentTheme) {\n\t\t\t\t\treturn currentTheme.get();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n);\n\nexport default theme;\n"]}