{"version":3,"file":"theme.mjs","sourceRoot":"","sources":["theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { create, invalidator, diffProperty, getRegistry } from '../vdom';\nimport cache from './cache';\nimport injector from './injector';\nimport Injector from '../Injector';\nimport Set from '../../shim/Set';\nimport { registerThemeInjector, Theme, Classes, ClassNames, INJECTED_THEME_KEY, THEME_KEY } from '../mixins/Themed';\nimport { shallow } from '../diff';\n\nexport interface ThemedProperties {\n\ttheme?: Theme;\n\tclasses?: Classes;\n}\n\nconst factory = create({ invalidator, cache, diffProperty, injector, getRegistry }).properties<ThemedProperties>();\n\nexport const theme = factory(\n\t({ middleware: { invalidator, cache, diffProperty, injector, getRegistry }, properties }) => {\n\t\tlet themeKeys = new Set();\n\t\tdiffProperty('theme', (current: ThemedProperties, next: ThemedProperties) => {\n\t\t\tif (current.theme !== next.theme) {\n\t\t\t\tcache.clear();\n\t\t\t\tinvalidator();\n\t\t\t}\n\t\t});\n\t\tdiffProperty('classes', (current: ThemedProperties, next: ThemedProperties) => {\n\t\t\tlet result = false;\n\t\t\tif ((current.classes && !next.classes) || (!current.classes && next.classes)) {\n\t\t\t\tresult = true;\n\t\t\t} else if (current.classes && next.classes) {\n\t\t\t\tconst keys = [...themeKeys.values()];\n\t\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\t\tlet key = keys[i];\n\t\t\t\t\tresult = shallow(current.classes[key], next.classes[key], 1).changed;\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result) {\n\t\t\t\tcache.clear();\n\t\t\t\tinvalidator();\n\t\t\t}\n\t\t});\n\n\t\tconst themeInjector = injector.get(INJECTED_THEME_KEY);\n\t\tif (!themeInjector) {\n\t\t\tconst registry = getRegistry();\n\t\t\tif (registry) {\n\t\t\t\tregisterThemeInjector(undefined, registry.base);\n\t\t\t}\n\t\t}\n\t\tinjector.subscribe(INJECTED_THEME_KEY, () => {\n\t\t\tcache.clear();\n\t\t\tinvalidator();\n\t\t});\n\t\treturn {\n\t\t\tclasses<T extends ClassNames>(css: T): T {\n\t\t\t\tlet theme = cache.get(css);\n\t\t\t\tif (theme) {\n\t\t\t\t\treturn theme;\n\t\t\t\t}\n\t\t\t\tconst { [THEME_KEY]: key, ...classes } = css;\n\t\t\t\tthemeKeys.add(key);\n\t\t\t\ttheme = classes as T;\n\t\t\t\tlet { theme: currentTheme, classes: currentClasses } = properties();\n\t\t\t\tif (!currentTheme) {\n\t\t\t\t\tconst injectedTheme = injector.get<Injector<Theme>>(INJECTED_THEME_KEY);\n\t\t\t\t\tcurrentTheme = injectedTheme ? injectedTheme.get() : undefined;\n\t\t\t\t}\n\t\t\t\tif (currentTheme && currentTheme[key]) {\n\t\t\t\t\ttheme = { ...theme, ...currentTheme[key] };\n\t\t\t\t}\n\t\t\t\tif (currentClasses && currentClasses[key]) {\n\t\t\t\t\tconst classKeys = Object.keys(currentClasses[key]);\n\t\t\t\t\tfor (let i = 0; i < classKeys.length; i++) {\n\t\t\t\t\t\tconst classKey = classKeys[i];\n\t\t\t\t\t\tif (theme[classKey]) {\n\t\t\t\t\t\t\ttheme[classKey] = `${theme[classKey]} ${currentClasses[key][classKey].join(' ')}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcache.set(css, theme);\n\t\t\t\treturn theme;\n\t\t\t},\n\t\t\tset(css: Theme): void {\n\t\t\t\tconst currentTheme = injector.get<Injector<Theme | undefined>>(INJECTED_THEME_KEY);\n\t\t\t\tif (currentTheme) {\n\t\t\t\t\tcurrentTheme.set(css);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget(): Theme | undefined {\n\t\t\t\tconst currentTheme = injector.get<Injector<Theme | undefined>>(INJECTED_THEME_KEY);\n\t\t\t\tif (currentTheme) {\n\t\t\t\t\treturn currentTheme.get();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n);\n\nexport default theme;\n"]}