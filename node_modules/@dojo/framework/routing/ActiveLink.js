(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../core/vdom", "../core/middleware/injector", "../core/middleware/cache", "./Link"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var vdom_1 = require("../core/vdom");
    var injector_1 = require("../core/middleware/injector");
    var cache_1 = require("../core/middleware/cache");
    var Link_1 = require("./Link");
    function paramsEqual(linkParams, contextParams) {
        if (linkParams === void 0) { linkParams = {}; }
        if (contextParams === void 0) { contextParams = {}; }
        return Object.keys(linkParams).every(function (key) { return linkParams[key] === contextParams[key]; });
    }
    var factory = vdom_1.create({ injector: injector_1.default, diffProperty: vdom_1.diffProperty, cache: cache_1.default, invalidator: vdom_1.invalidator }).properties();
    exports.ActiveLink = factory(function ActiveLink(_a) {
        var _b = _a.middleware, diffProperty = _b.diffProperty, injector = _b.injector, cache = _b.cache, invalidator = _b.invalidator, properties = _a.properties, children = _a.children;
        var _c = properties(), to = _c.to, _d = _c.routerKey, routerKey = _d === void 0 ? 'router' : _d, params = _c.params;
        var _e = properties(), activeClasses = _e.activeClasses, _f = _e.classes, classes = _f === void 0 ? [] : _f, props = tslib_1.__rest(_e, ["activeClasses", "classes"]);
        diffProperty('to', function (current, next) {
            if (current.to !== next.to) {
                var router_1 = injector.get(routerKey);
                var currentHandle = cache.get('handle');
                if (currentHandle) {
                    currentHandle.destroy();
                }
                if (router_1) {
                    var handle = router_1.on('outlet', function (_a) {
                        var outlet = _a.outlet;
                        if (outlet.id === to) {
                            invalidator();
                        }
                    });
                    cache.set('handle', handle);
                }
                invalidator();
            }
        });
        var router = injector.get(routerKey);
        if (router) {
            if (!cache.get('handle')) {
                var handle = router.on('outlet', function (_a) {
                    var outlet = _a.outlet;
                    if (outlet.id === to) {
                        invalidator();
                    }
                });
                cache.set('handle', handle);
            }
            var context = router.getOutlet(to);
            var isActive = context && paramsEqual(params, context.params);
            classes = Array.isArray(classes) ? classes : [classes];
            if (isActive) {
                classes = tslib_1.__spread(classes, activeClasses);
            }
            props = tslib_1.__assign({}, props, { classes: classes });
        }
        return vdom_1.w(Link_1.default, props, children());
    });
    exports.default = exports.ActiveLink;
});
//# sourceMappingURL=ActiveLink.js.map