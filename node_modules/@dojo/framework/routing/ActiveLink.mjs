var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import { create, diffProperty, invalidator, w } from '../core/vdom';
import injector from '../core/middleware/injector';
import cache from '../core/middleware/cache';
import Link from './Link';
function paramsEqual(linkParams = {}, contextParams = {}) {
    return Object.keys(linkParams).every((key) => linkParams[key] === contextParams[key]);
}
const factory = create({ injector, diffProperty, cache, invalidator }).properties();
export const ActiveLink = factory(function ActiveLink({ middleware: { diffProperty, injector, cache, invalidator }, properties, children }) {
    const { to, routerKey = 'router', params } = properties();
    let _a = properties(), { activeClasses, classes = [] } = _a, props = __rest(_a, ["activeClasses", "classes"]);
    diffProperty('to', (current, next) => {
        if (current.to !== next.to) {
            const router = injector.get(routerKey);
            const currentHandle = cache.get('handle');
            if (currentHandle) {
                currentHandle.destroy();
            }
            if (router) {
                const handle = router.on('outlet', ({ outlet }) => {
                    if (outlet.id === to) {
                        invalidator();
                    }
                });
                cache.set('handle', handle);
            }
            invalidator();
        }
    });
    const router = injector.get(routerKey);
    if (router) {
        if (!cache.get('handle')) {
            const handle = router.on('outlet', ({ outlet }) => {
                if (outlet.id === to) {
                    invalidator();
                }
            });
            cache.set('handle', handle);
        }
        const context = router.getOutlet(to);
        const isActive = context && paramsEqual(params, context.params);
        classes = Array.isArray(classes) ? classes : [classes];
        if (isActive) {
            classes = [...classes, ...activeClasses];
        }
        props = Object.assign({}, props, { classes });
    }
    return w(Link, props, children());
});
export default ActiveLink;
//# sourceMappingURL=ActiveLink.mjs.map