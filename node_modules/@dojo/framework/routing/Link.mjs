var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import { create, v } from '../core/vdom';
import injector from '../core/middleware/injector';
const factory = create({ injector }).properties();
export const Link = factory(function Link({ middleware: { injector }, properties, children }) {
    let _a = properties(), { routerKey = 'router', to, isOutlet = true, target, params = {}, onClick } = _a, props = __rest(_a, ["routerKey", "to", "isOutlet", "target", "params", "onClick"]);
    const router = injector.get(routerKey);
    let href = to;
    let linkProps;
    if (router) {
        if (isOutlet) {
            href = router.link(href, params);
        }
        const onclick = (event) => {
            onClick && onClick(event);
            if (!event.defaultPrevented && event.button === 0 && !event.metaKey && !event.ctrlKey && !target) {
                event.preventDefault();
                href !== undefined && router.setPath(href);
            }
        };
        linkProps = Object.assign({}, props, { onclick, href });
    }
    else {
        linkProps = Object.assign({}, props, { href });
    }
    return v('a', linkProps, children());
});
export default Link;
//# sourceMappingURL=Link.mjs.map