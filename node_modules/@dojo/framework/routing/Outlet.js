(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../core/vdom", "../core/middleware/injector", "../core/middleware/cache"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../core/vdom");
    var injector_1 = require("../core/middleware/injector");
    var cache_1 = require("../core/middleware/cache");
    var factory = vdom_1.create({ cache: cache_1.default, injector: injector_1.default, diffProperty: vdom_1.diffProperty, invalidator: vdom_1.invalidator }).properties();
    exports.Outlet = factory(function Outlet(_a) {
        var _b = _a.middleware, cache = _b.cache, injector = _b.injector, diffProperty = _b.diffProperty, invalidator = _b.invalidator, properties = _a.properties;
        var _c = properties(), renderer = _c.renderer, id = _c.id, _d = _c.routerKey, routerKey = _d === void 0 ? 'router' : _d;
        var currentHandle = cache.get('handle');
        if (!currentHandle) {
            var handle = injector.subscribe(routerKey);
            if (handle) {
                cache.set('handle', handle);
            }
        }
        diffProperty('routerKey', function (current, next) {
            var _a = current.routerKey, currentRouterKey = _a === void 0 ? 'router' : _a;
            var _b = next.routerKey, routerKey = _b === void 0 ? 'router' : _b;
            if (routerKey !== currentRouterKey) {
                var currentHandle_1 = cache.get('handle');
                if (currentHandle_1) {
                    currentHandle_1();
                }
                var handle = injector.subscribe(routerKey);
                if (handle) {
                    cache.set('handle', handle);
                }
            }
            invalidator();
        });
        var router = injector.get(routerKey);
        if (router) {
            var outletContext = router.getOutlet(id);
            if (outletContext) {
                var queryParams = outletContext.queryParams, params = outletContext.params, type = outletContext.type, isError = outletContext.isError, isExact = outletContext.isExact;
                var result = renderer({ queryParams: queryParams, params: params, type: type, isError: isError, isExact: isExact, router: router });
                if (result) {
                    return result;
                }
            }
        }
        return null;
    });
    exports.default = exports.Outlet;
});
//# sourceMappingURL=Outlet.js.map