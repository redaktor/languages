(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../shim/global", "../../core/has"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var global_1 = require("../../shim/global");
    var has_1 = require("../../core/has");
    var trailingSlash = new RegExp(/\/$/);
    var leadingSlash = new RegExp(/^\//);
    function stripBase(base, path) {
        if (!base) {
            return path;
        }
        if (path.indexOf(base) === 0) {
            return path.slice(base.length);
        }
        return path;
    }
    function sanatizePath(path) {
        if (path[0] === '#') {
            path = path.slice(1);
        }
        if (path[0] === '/') {
            path = path.slice(1);
        }
        return path;
    }
    var StateHistory = /** @class */ (function () {
        function StateHistory(_a) {
            var _this = this;
            var onChange = _a.onChange, _b = _a.window, window = _b === void 0 ? global_1.default.window : _b, base = _a.base;
            this._onChange = function () {
                var pathName = _this._window.location.pathname.replace(/\/$/, '');
                _this._current = stripBase(_this._base, pathName + _this._window.location.search);
                _this._onChangeFunction(_this._current);
            };
            if (has_1.default('dojo-debug') && base) {
                console.warn("Base is no longer supported via history options, please set 'base' in the '.dojorc'");
            }
            this._base = has_1.default('app-base') ? "" + has_1.default('app-base') : '/';
            if (/(#|\?)/.test(this._base)) {
                throw new TypeError("base must not contain '#' or '?'");
            }
            this._onChangeFunction = onChange;
            this._window = window;
            if (!trailingSlash.test(this._base)) {
                this._base = this._base + "/";
            }
            if (!leadingSlash.test(this._base)) {
                this._base = "/" + this._base;
            }
            this._window.addEventListener('popstate', this._onChange, false);
            this._onChange();
        }
        StateHistory.prototype.prefix = function (path) {
            return sanatizePath(path);
        };
        StateHistory.prototype._setBasePath = function (path) {
            return "" + this._base + sanatizePath(path);
        };
        StateHistory.prototype.set = function (path) {
            var value = stripBase(this._base, path);
            if (this._current === value) {
                return;
            }
            this._window.history.pushState({}, '', this._setBasePath(value));
            this._onChange();
        };
        Object.defineProperty(StateHistory.prototype, "current", {
            get: function () {
                return this._current;
            },
            enumerable: true,
            configurable: true
        });
        return StateHistory;
    }());
    exports.StateHistory = StateHistory;
    exports.default = StateHistory;
});
//# sourceMappingURL=StateHistory.js.map