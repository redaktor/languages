{"version":3,"file":"Observable.js","sourceRoot":"","sources":["Observable.ts"],"names":[],"mappings":"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","sourcesContent":["import global from './global';\n`!has('es6-iterator')`;\nimport { isArrayLike, isIterable, Iterable } from './iterator';\nimport has from '../core/has';\n`!has('es6-symbol')`;\nimport './Symbol';\n\nexport interface Observable<T> extends ObservableObject {\n\t/**\n\t * Registers handlers for handling emitted values, error and completions from the observable, and\n\t * executes the observable's subscriber function, which will take action to set up the underlying data stream.\n\t *\n\t * @param observer    The observer object that will handle events\n\t *\n\t * @return A Subscription object that can be used to manage the subscription.\n\t */\n\tsubscribe(observer: Observer<T>): Subscription;\n\n\t/**\n\t * Registers handlers for handling emitted values, error and completions from the observable, and\n\t * executes the observable's subscriber function, which will take action to set up the underlying data stream.\n\t *\n\t * @param onNext A function to handle an emitted value. Value is passed in as the first parameter to the function.\n\t * @param onError A function to handle errors that occur during onNext, or during subscription.\n\t * @param onComplete A function that gets called when the subscription is complete, and will not send any more values. This function will also get called if an error occurs and onError is not defined.\n\t *\n\t * @return {Subscription} A Subscription object that can be used to manage the subscription.\n\t */\n\tsubscribe(\n\t\tonNext: (value: T) => any,\n\t\tonError?: (error: any) => any,\n\t\tonComplete?: (completeValue?: any) => void\n\t): Subscription;\n\n\t[Symbol.observable](): this;\n}\n\nexport interface ObservableConstructor {\n\t/**\n\t * Create a new observerable with a subscriber function. The subscriber function will get called with a\n\t * SubscriptionObserver parameter for controlling the subscription.  I a function is returned, it will be\n\t * run when the subscription is complete.\n\t *\n\t * @param subscriber The subscription function to be called when observers are subscribed\n\t *\n\t * @example\n\t * ```ts\n\t * const source = new Observer<number>((observer) => {\n\t *     observer.next(1);\n\t *     observer.next(2);\n\t *     observer.next(3);\n\t * });\n\t * ```ts\n\t */\n\tnew <T>(subscriber: Subscriber<T>): Observable<T>;\n\n\t/**\n\t * Create an Observable from another object. If the object is in itself Observable, the object will be returned.\n\t * Otherwise, the value will be wrapped in an Observable. If the object is iterable, an Observable will be created\n\t * that emits each item of the iterable.\n\t *\n\t * @param item The item to be turned into an Observable\n\t * @return An observable for the item you passed in\n\t */\n\tfrom<T>(item: Iterable<T> | ArrayLike<T> | ObservableObject): Observable<T>;\n\n\t/**\n\t * Create an Observable from a list of values.\n\t *\n\t * @param items The values to be emitted\n\t * @return An Observable that will emit the specified values\n\t *\n\t * @example\n\t * ```ts\n\t * let source = Observable.of(1, 2, 3);\n\t * // will emit three separate values, 1, 2, and 3.\n\t * ```\n\t */\n\tof<T>(...items: T[]): Observable<T>;\n}\n\n/**\n * An object that implements a Symbol.observerable method.\n */\nexport interface ObservableObject {\n\t[Symbol.observable]: () => any;\n}\n\n/**\n * Handles events emitted from the subscription\n */\nexport interface Observer<T> {\n\t/**\n\t * Called to handle a single emitted event.\n\t *\n\t * @param value The value that was emitted.\n\t */\n\tnext?(value: T): any;\n\n\t/**\n\t * An optional method to be called when the subscription starts (before any events are emitted).\n\t * @param observer\n\t */\n\tstart?(observer: Subscription): void;\n\n\t/**\n\t * An optional method to be called if an error occurs during subscription or handling.\n\t *\n\t * @param errorValue The error\n\t */\n\terror?(errorValue: any): any;\n\n\t/**\n\t * An optional method to be called when the subscription is completed (unless an error occurred and the error method was specified)\n\t *\n\t * @param completeValue The value passed to the completion method.\n\t */\n\tcomplete?(completeValue?: any): void;\n}\n\n/**\n * Describes an object that can be subscribed to\n */\nexport interface Subscribable<T> {\n\tsubscribe(observer: Observer<T>): Subscription;\n\tsubscribe(\n\t\tonNext: (value: T) => any,\n\t\tonError?: (error: any) => any,\n\t\tonComplete?: (completeValue?: any) => void\n\t): Subscription;\n}\n\nexport interface Subscriber<T> {\n\t(observer: SubscriptionObserver<T>): (() => void) | void | { unsubscribe: () => void };\n}\n\n/**\n * Handles an individual subscription to an Observable.\n */\nexport interface Subscription {\n\t/**\n\t * Whether or not the subscription is closed. Closed subscriptions will not emit values.\n\t */\n\tclosed: boolean;\n\n\t/**\n\t * A function to call to close the subscription. Calling this will call any associated tear down methods.\n\t */\n\tunsubscribe: (() => void);\n}\n\n/**\n * An object used to control a single subscription and an observer.\n */\nexport interface SubscriptionObserver<T> {\n\t/**\n\t * Whether or not the subscription is closed.\n\t */\n\treadonly closed: boolean;\n\n\t/**\n\t * Emit an event to the observer.\n\t *\n\t * @param value The value to be emitted.\n\t */\n\tnext(value: T): any;\n\n\t/**\n\t * Report an error. The subscription will be closed after an error has occurred.\n\t *\n\t * @param errorValue The error to be reported.\n\t */\n\terror(errorValue: any): any;\n\n\t/**\n\t * Report completion of the subscription. The subscription will be closed, and no new values will be emitted,\n\t * after completion.\n\t *\n\t * @param completeValue A value to pass to the completion handler.\n\t */\n\tcomplete(completeValue?: any): void;\n}\n\nexport let Observable: ObservableConstructor = global.Observable;\n\nif (!has('es-observable')) {\n\t/*\n\t * Create a subscription observer for a given observer, and return the subscription.  The \"logic\" for Observerables\n\t * is in here!\n\t */\n\tconst startSubscription = function startSubscription<T>(\n\t\texecutor: Subscriber<T>,\n\t\tobserver: Observer<T>\n\t): Subscription {\n\t\tlet closed = false;\n\t\tlet cleanUp: () => void | undefined;\n\n\t\tfunction unsubscribe() {\n\t\t\tif (!closed) {\n\t\t\t\tclosed = true;\n\n\t\t\t\tif (cleanUp) {\n\t\t\t\t\tcleanUp();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction start(subscriptionObserver: SubscriptionObserver<T>) {\n\t\t\tif (observer.start) {\n\t\t\t\tobserver.start(subscription);\n\t\t\t}\n\n\t\t\tif (closed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result: any = executor(subscriptionObserver);\n\n\t\t\t\tif (typeof result === 'function') {\n\t\t\t\t\tcleanUp = result;\n\t\t\t\t} else if (result && 'unsubscribe' in result) {\n\t\t\t\t\tcleanUp = result.unsubscribe;\n\t\t\t\t} else if (result !== undefined && result !== null) {\n\t\t\t\t\tthrow new TypeError('Subscriber must return a callable or subscription');\n\t\t\t\t}\n\n\t\t\t\tif (closed) {\n\t\t\t\t\tif (cleanUp) {\n\t\t\t\t\t\tcleanUp();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction next(value: T): any {\n\t\t\tif (closed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst next = observer.next;\n\n\t\t\ttry {\n\t\t\t\tif (typeof next === 'function') {\n\t\t\t\t\treturn next(value);\n\t\t\t\t} else if (next !== undefined && next !== null) {\n\t\t\t\t\tthrow new TypeError('Observer.next is not a function');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction error(errorValue?: any): any {\n\t\t\tif (!closed) {\n\t\t\t\tlet cleanUpError: Error | undefined = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tunsubscribe();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcleanUpError = e;\n\t\t\t\t}\n\n\t\t\t\tconst observerError = observer.error;\n\n\t\t\t\tif (observerError !== undefined && observerError !== null) {\n\t\t\t\t\tif (typeof observerError === 'function') {\n\t\t\t\t\t\tconst errorResult = observerError(errorValue);\n\n\t\t\t\t\t\tif (cleanUpError !== undefined) {\n\t\t\t\t\t\t\tthrow cleanUpError;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn errorResult;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError('Observer.error is not a function');\n\t\t\t\t\t}\n\t\t\t\t} else if (observer.complete) {\n\t\t\t\t\treturn observer.complete(errorValue);\n\t\t\t\t} else {\n\t\t\t\t\tthrow errorValue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow errorValue;\n\t\t\t}\n\t\t}\n\n\t\tfunction complete(completeValue?: any): any {\n\t\t\tif (!closed) {\n\t\t\t\tlet cleanUpError: Error | undefined = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tunsubscribe();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcleanUpError = e;\n\t\t\t\t}\n\n\t\t\t\tconst observerComplete = observer.complete;\n\n\t\t\t\tif (observerComplete !== undefined && observerComplete !== null) {\n\t\t\t\t\tif (typeof observerComplete === 'function') {\n\t\t\t\t\t\tconst completeResult = observerComplete(completeValue);\n\n\t\t\t\t\t\tif (cleanUpError !== undefined) {\n\t\t\t\t\t\t\tthrow cleanUpError;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn completeResult;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError('Observer.complete is not a function');\n\t\t\t\t\t}\n\t\t\t\t} else if (cleanUpError) {\n\t\t\t\t\tthrow cleanUpError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst subscription = Object.create(\n\t\t\tObject.create(\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tclosed: {\n\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tget() {\n\t\t\t\t\t\t\treturn closed;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tunsubscribe: {\n\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tvalue: unsubscribe\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tconst prototype = Object.create(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tnext: {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: next,\n\t\t\t\t\tconfigurable: true\n\t\t\t\t},\n\t\t\t\terror: {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: error,\n\t\t\t\t\tconfigurable: true\n\t\t\t\t},\n\t\t\t\tcomplete: {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: complete,\n\t\t\t\t\tconfigurable: true\n\t\t\t\t},\n\t\t\t\tclosed: {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tget() {\n\t\t\t\t\t\treturn closed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// create the SubscriptionObserver and kick things off\n\t\tstart(Object.create(prototype));\n\n\t\t// the ONLY way to control the SubscriptionObserver is with the subscription or from a subscriber\n\t\treturn subscription;\n\t};\n\n\tObservable = (function() {\n\t\tfunction nonEnumerable(target: any, key: string | symbol, descriptor: PropertyDescriptor) {\n\t\t\tdescriptor.enumerable = false;\n\t\t}\n\n\t\tclass Observable<T> {\n\t\t\tprivate _executor: Subscriber<T>;\n\n\t\t\t@nonEnumerable\n\t\t\t[Symbol.observable](): this {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconstructor(subscriber: Subscriber<T>) {\n\t\t\t\tif (typeof subscriber !== 'function') {\n\t\t\t\t\tthrow new TypeError('subscriber is not a function');\n\t\t\t\t}\n\n\t\t\t\tthis._executor = subscriber;\n\t\t\t}\n\n\t\t\t@nonEnumerable\n\t\t\tsubscribe(observerOrNext: any, ...listeners: any[]) {\n\t\t\t\tconst [onError, onComplete] = [...listeners];\n\n\t\t\t\tif (\n\t\t\t\t\t!observerOrNext ||\n\t\t\t\t\ttypeof observerOrNext === 'number' ||\n\t\t\t\t\ttypeof observerOrNext === 'string' ||\n\t\t\t\t\ttypeof observerOrNext === 'boolean'\n\t\t\t\t) {\n\t\t\t\t\tthrow new TypeError('parameter must be a function or an observer');\n\t\t\t\t}\n\n\t\t\t\tlet observer: Observer<T>;\n\n\t\t\t\tif (typeof observerOrNext === 'function') {\n\t\t\t\t\tobserver = {\n\t\t\t\t\t\tnext: observerOrNext\n\t\t\t\t\t};\n\n\t\t\t\t\tif (typeof onError === 'function') {\n\t\t\t\t\t\tobserver.error = onError;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof onComplete === 'function') {\n\t\t\t\t\t\tobserver.complete = onComplete;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tobserver = observerOrNext;\n\t\t\t\t}\n\n\t\t\t\treturn startSubscription(this._executor, observer);\n\t\t\t}\n\n\t\t\t@nonEnumerable\n\t\t\tstatic of<U>(...items: U[]): Observable<U> {\n\t\t\t\tlet constructor: typeof Observable;\n\n\t\t\t\tif (typeof this !== 'function') {\n\t\t\t\t\tconstructor = Observable;\n\t\t\t\t} else {\n\t\t\t\t\tconstructor = this;\n\t\t\t\t}\n\n\t\t\t\treturn new constructor((observer: SubscriptionObserver<U>) => {\n\t\t\t\t\tfor (const o of items) {\n\t\t\t\t\t\tobserver.next(o);\n\t\t\t\t\t}\n\t\t\t\t\tobserver.complete();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t@nonEnumerable\n\t\t\tstatic from<U>(item: Iterable<U> | ArrayLike<U> | Observable<U>): Observable<U> {\n\t\t\t\tif (item === null || item === undefined) {\n\t\t\t\t\tthrow new TypeError('item cannot be null or undefined');\n\t\t\t\t}\n\n\t\t\t\tlet constructor: typeof Observable;\n\n\t\t\t\tif (typeof this !== 'function') {\n\t\t\t\t\tconstructor = Observable;\n\t\t\t\t} else {\n\t\t\t\t\tconstructor = this;\n\t\t\t\t}\n\n\t\t\t\tconst observableSymbol = (item as Observable<U>)[Symbol.observable];\n\n\t\t\t\tif (observableSymbol !== undefined) {\n\t\t\t\t\tif (typeof observableSymbol !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Symbol.observable must be a function');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: any = observableSymbol.call(item);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tresult === undefined ||\n\t\t\t\t\t\tresult === null ||\n\t\t\t\t\t\ttypeof result === 'number' ||\n\t\t\t\t\t\ttypeof result === 'boolean' ||\n\t\t\t\t\t\ttypeof result === 'string'\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new TypeError('Return value of Symbol.observable must be object');\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((result.constructor && result.constructor === this) || result instanceof Observable) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} else if (result.subscribe) {\n\t\t\t\t\t\treturn new constructor(result.subscribe);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (constructor.of) {\n\t\t\t\t\t\t\treturn constructor.of(result);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Observable.of(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isIterable(item) || isArrayLike(item)) {\n\t\t\t\t\treturn new constructor((observer: SubscriptionObserver<U>) => {\n\t\t\t\t\t\tif (isArrayLike(item)) {\n\t\t\t\t\t\t\tfor (let i = 0; i < item.length; i++) {\n\t\t\t\t\t\t\t\tobserver.next(item[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const o of item) {\n\t\t\t\t\t\t\t\tobserver.next(o);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Parameter is neither Observable nor Iterable');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Observable;\n\t})();\n}\n\nexport default Observable;\n"]}