{"version":3,"file":"Set.mjs","sourceRoot":"","sources":["Set.ts"],"names":[],"mappings":"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","sourcesContent":["import global from './global';\n`!has('es6-iterator')`;\nimport { isArrayLike, Iterable, IterableIterator, ShimIterator } from './iterator';\nimport has from '../core/has';\n`!has('es6-symbol')`;\nimport './Symbol';\n\nexport interface Set<T> {\n\t/**\n\t * Adds a `value` to the `Set`\n\t *\n\t * @param value The value to add to the set\n\t * @returns The instance of the `Set`\n\t */\n\tadd(value: T): this;\n\n\t/**\n\t * Removes all the values from the `Set`.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Removes a `value` from the set\n\t *\n\t * @param value The value to be removed\n\t * @returns `true` if the value was removed\n\t */\n\tdelete(value: T): boolean;\n\n\t/**\n\t * Returns an iterator that yields each entry.\n\t *\n\t * @return An iterator for each key/value pair in the instance.\n\t */\n\tentries(): IterableIterator<[T, T]>;\n\n\t/**\n\t * Executes a given function for each set entry. The function\n\t * is invoked with three arguments: the element value, the\n\t * element key, and the associated `Set` instance.\n\t *\n\t * @param callbackfn The function to execute for each map entry,\n\t * @param thisArg The value to use for `this` for each execution of the calback\n\t */\n\tforEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n\n\t/**\n\t * Identifies if a value is part of the set.\n\t *\n\t * @param value The value to check\n\t * @returns `true` if the value is part of the set otherwise `false`\n\t */\n\thas(value: T): boolean;\n\n\t/**\n\t * Despite its name, returns an iterable of the values in the set,\n\t */\n\tkeys(): IterableIterator<T>;\n\n\t/**\n\t * Returns the number of values in the `Set`.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * Returns an iterable of values in the set.\n\t */\n\tvalues(): IterableIterator<T>;\n\n\t/** Iterates over values in the set. */\n\t[Symbol.iterator](): IterableIterator<T>;\n\n\treadonly [Symbol.toStringTag]: 'Set';\n}\n\nexport interface SetConstructor {\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t */\n\tnew (): Set<any>;\n\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t *\n\t * @param iterator The iterable structure to initialize the set with\n\t */\n\tnew <T>(iterator?: T[]): Set<T>;\n\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t *\n\t * @param iterator The iterable structure to initialize the set with\n\t */\n\tnew <T>(iterator: Iterable<T>): Set<T>;\n\n\treadonly prototype: Set<any>;\n}\n\nexport let Set: SetConstructor = global.Set;\n\nif (!has('es6-set')) {\n\tSet = global.Set = class Set<T> {\n\t\tprivate readonly _setData: T[] = [];\n\n\t\tstatic [Symbol.species] = Set;\n\n\t\tconstructor(iterable?: ArrayLike<T> | Iterable<T>) {\n\t\t\tif (iterable) {\n\t\t\t\tif (isArrayLike(iterable)) {\n\t\t\t\t\tfor (let i = 0; i < iterable.length; i++) {\n\t\t\t\t\t\tthis.add(iterable[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const value of iterable) {\n\t\t\t\t\t\tthis.add(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tadd(value: T): this {\n\t\t\tif (this.has(value)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis._setData.push(value);\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(): void {\n\t\t\tthis._setData.length = 0;\n\t\t}\n\n\t\tdelete(value: T): boolean {\n\t\t\tconst idx = this._setData.indexOf(value);\n\t\t\tif (idx === -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._setData.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\n\t\tentries(): IterableIterator<[T, T]> {\n\t\t\treturn new ShimIterator<[any, any]>(this._setData.map<[any, any]>((value) => [value, value]));\n\t\t}\n\n\t\tforEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void {\n\t\t\tconst iterator = this.values();\n\t\t\tlet result = iterator.next();\n\t\t\twhile (!result.done) {\n\t\t\t\tcallbackfn.call(thisArg, result.value, result.value, this);\n\t\t\t\tresult = iterator.next();\n\t\t\t}\n\t\t}\n\n\t\thas(value: T): boolean {\n\t\t\treturn this._setData.indexOf(value) > -1;\n\t\t}\n\n\t\tkeys(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn this._setData.length;\n\t\t}\n\n\t\tvalues(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\t[Symbol.iterator](): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\t[Symbol.toStringTag]: 'Set' = 'Set';\n\t};\n}\n\nexport default Set;\n"]}