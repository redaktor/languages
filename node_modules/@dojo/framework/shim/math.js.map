{"version":3,"file":"math.js","sourceRoot":"","sources":["math.ts"],"names":[],"mappings":"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","sourcesContent":["import has from '../core/has';\n\nexport const FRACTION_UNITS = Math.pow(2, 23);\nexport const MAX_FLOAT32 = 3.4028234663852886e38;\nexport const MIN_FLOAT32 = 1.401298464324817e-45;\n\nif (!has('es6-math')) {\n\tMath.acosh = function acosh(n: number): number {\n\t\treturn Math.log(n + Math.sqrt(n * n - 1));\n\t};\n\n\tMath.asinh = function asinh(n: number): number {\n\t\tif (n === -Infinity) {\n\t\t\treturn n;\n\t\t} else {\n\t\t\treturn Math.log(n + Math.sqrt(n * n + 1));\n\t\t}\n\t};\n\n\tMath.atanh = function atanh(n: number): number {\n\t\treturn Math.log((1 + n) / (1 - n)) / 2;\n\t};\n\n\tMath.cbrt = function cbrt(n: number): number {\n\t\tconst y = Math.pow(Math.abs(n), 1 / 3);\n\t\treturn n < 0 ? -y : y;\n\t};\n\n\tMath.clz32 = function clz32(n: number): number {\n\t\tn = Number(n) >>> 0;\n\t\treturn n ? 32 - n.toString(2).length : 32;\n\t};\n\n\tMath.cosh = function cosh(n: number): number {\n\t\tconst m = Math.exp(n);\n\t\treturn (m + 1 / m) / 2;\n\t};\n\n\tMath.expm1 = function expm1(n: number): number {\n\t\treturn Math.exp(n) - 1;\n\t};\n\n\tMath.fround = function(n: number): number {\n\t\treturn new Float32Array([n])[0];\n\t};\n\n\tMath.hypot = function hypot(...args: number[]): number {\n\t\t// See: http://mzl.la/1HDi6xP\n\t\tlet n = 0;\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg === Infinity || arg === -Infinity) {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t\tn += arg * arg;\n\t\t}\n\t\treturn Math.sqrt(n);\n\t};\n\n\tMath.log2 = function log2(n: number): number {\n\t\treturn Math.log(n) / Math.LN2;\n\t};\n\n\tMath.log10 = function log10(n: number): number {\n\t\treturn Math.log(n) / Math.LN10;\n\t};\n\n\tMath.log1p = function log1p(n: number): number {\n\t\treturn Math.log(1 + n);\n\t};\n\n\tMath.sign = function sign(n: number): number {\n\t\tn = Number(n);\n\t\tif (n === 0 || n !== n) {\n\t\t\treturn n;\n\t\t}\n\t\treturn n > 0 ? 1 : -1;\n\t};\n\n\tMath.sinh = function sinh(n: number): number {\n\t\tconst m = Math.exp(n);\n\t\treturn (m - 1 / m) / 2;\n\t};\n\n\tMath.tanh = function tanh(n: number): number {\n\t\tif (n === Infinity) {\n\t\t\treturn 1;\n\t\t} else if (n === -Infinity) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tconst y = Math.exp(2 * n);\n\t\t\treturn (y - 1) / (y + 1);\n\t\t}\n\t};\n\n\tMath.trunc = function trunc(n: number): number {\n\t\treturn n < 0 ? Math.ceil(n) : Math.floor(n);\n\t};\n}\n\nif (!has('es6-math-imul')) {\n\tMath.imul = function imul(n: number, m: number): number {\n\t\t// See: http://mzl.la/1K279FK\n\t\tconst ah = (n >>> 16) & 0xffff;\n\t\tconst al = n & 0xffff;\n\t\tconst bh = (m >>> 16) & 0xffff;\n\t\tconst bl = m & 0xffff;\n\t\treturn (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n\t};\n}\n\n/**\n * Returns the hyperbolic arccosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let acosh: (n: number) => number = (Math as any).acosh;\n\n/**\n * Returns the hyperbolic arcsine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let asinh: (n: number) => number = (Math as any).asinh;\n\n/**\n * Returns the hyperbolic arctangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let atanh: (n: number) => number = (Math as any).atanh;\n\n/**\n * Returns the cube root of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let cbrt: (n: number) => number = (Math as any).cbrt;\n\n/**\n * Returns the number of leading zero bits in the 32-bit\n * binary representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let clz32: (n: number) => number = (Math as any).clz32;\n\n/**\n * Returns the hyperbolic cosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let cosh: (n: number) => number = (Math as any).cosh;\n\n/**\n * Returns e raised to the specified power minus one.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let expm1: (n: number) => number = (Math as any).expm1;\n\n/**\n * Returns the nearest single-precision float representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let fround: (n: number) => number = (Math as any).fround;\n\n/**\n * Returns the square root of the sum of squares of its arguments.\n *\n * @return The result\n */\nexport let hypot: (...args: number[]) => number = (Math as any).hypot;\n\n/**\n * Returns the result of the 32-bit multiplication of the two parameters.\n *\n * @param n The number to use in calculation\n * @param m The number to use in calculation\n * @return The result\n */\nexport let imul: (n: number, m: number) => number = (Math as any).imul;\n\n/**\n * Returns the base 2 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let log2: (n: number) => number = (Math as any).log2;\n\n/**\n * Returns the base 10 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let log10: (n: number) => number = (Math as any).log10;\n\n/**\n * Returns the natural logarithm of 1 + a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let log1p: (n: number) => number = (Math as any).log1p;\n\n/**\n * Returns the sign of a number, indicating whether the number is positive.\n *\n * @param n The number to use in calculation\n * @return 1 if the number is positive, -1 if the number is negative, or 0 if the number is 0\n */\nexport let sign: (n: number) => number = (Math as any).sign;\n\n/**\n * Returns the hyperbolic sine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let sinh: (n: number) => number = (Math as any).sinh;\n\n/**\n * Returns the hyperbolic tangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let tanh: (n: number) => number = (Math as any).tanh;\n\n/**\n * Returns the integral part of a number by removing any fractional digits.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport let trunc: (n: number) => number = (Math as any).trunc;\n\nexport default Math;\n"]}