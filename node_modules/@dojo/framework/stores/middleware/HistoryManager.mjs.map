{"version":3,"file":"HistoryManager.mjs","sourceRoot":"","sources":["HistoryManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { processExecutor, getProcess, ProcessError, ProcessResult, ProcessCallback } from '../process';\nimport { PatchOperation } from '../state/Patch';\nimport { Pointer } from '../state/Pointer';\nimport Store from '../Store';\nimport WeakMap from '../../shim/WeakMap';\n\nexport interface HistoryOperation {\n\tid: string;\n\toperations: PatchOperation[];\n}\n\nexport interface HistoryData {\n\thistory: HistoryOperation[];\n\tredo: HistoryOperation[];\n}\n\nexport class HistoryManager {\n\tprivate _storeMap = new WeakMap();\n\tprivate after = (error: ProcessError | null, result: ProcessResult) => {\n\t\tconst { operations, undoOperations, id, store } = result;\n\t\tconst { history, undo } = this._storeMap.get(store) || {\n\t\t\thistory: [],\n\t\t\tundo: []\n\t\t};\n\t\thistory.push({ id, operations });\n\t\tundo.push({ id, operations: undoOperations });\n\t\tthis._storeMap.set(store, { history, undo, redo: [] });\n\t};\n\n\tpublic callback: ProcessCallback = () => ({ after: this.after });\n\n\tpublic canUndo(store: Store): boolean {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, undo } = stacks;\n\t\t\tif (undo.length && history.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic canRedo(store: Store): boolean {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { redo } = stacks;\n\t\t\tif (redo.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic redo(store: Store) {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, redo, undo } = stacks;\n\t\t\tif (redo.length) {\n\t\t\t\tconst { id, operations } = redo.pop();\n\t\t\t\tconst result = store.apply(operations);\n\t\t\t\thistory.push({ id, operations });\n\t\t\t\tundo.push({ id, operations: result });\n\t\t\t\tthis._storeMap.set(store, { history, undo, redo });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic undo(store: Store) {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, undo, redo } = stacks;\n\t\t\tif (undo.length && history.length) {\n\t\t\t\tconst { id, operations } = undo.pop();\n\t\t\t\thistory.pop();\n\t\t\t\tconst result = store.apply(operations);\n\t\t\t\tredo.push({ id, operations: result });\n\t\t\t\tthis._storeMap.set(store, { history, undo, redo });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic deserialize(store: Store, data: HistoryData) {\n\t\tconst { history, redo } = data;\n\t\thistory.forEach(({ id, operations }: HistoryOperation) => {\n\t\t\toperations = operations.map((operation) => {\n\t\t\t\toperation.path = new Pointer(String(operation.path));\n\t\t\t\treturn operation;\n\t\t\t});\n\t\t\tlet before;\n\t\t\tlet after;\n\t\t\tconst process = getProcess(id);\n\t\t\tif (process) {\n\t\t\t\tbefore = process[2];\n\t\t\t\tafter = process[3];\n\t\t\t}\n\t\t\tprocessExecutor(id, [() => operations], store, before, after, undefined)({});\n\t\t});\n\t\tconst stacks = this._storeMap.get(store);\n\t\tredo.forEach(({ id, operations }: HistoryOperation) => {\n\t\t\toperations = operations.map((operation) => {\n\t\t\t\toperation.path = new Pointer(String(operation.path));\n\t\t\t\treturn operation;\n\t\t\t});\n\t\t});\n\t\tstacks.redo = redo;\n\t}\n\n\tpublic serialize(store: Store): HistoryData {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\treturn {\n\t\t\t\thistory: stacks.history,\n\t\t\t\tredo: stacks.redo\n\t\t\t};\n\t\t}\n\t\treturn { history: [], redo: [] };\n\t}\n}\n\nexport default HistoryManager;\n"]}