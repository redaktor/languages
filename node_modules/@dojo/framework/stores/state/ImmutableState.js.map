{"version":3,"file":"ImmutableState.js","sourceRoot":"","sources":["ImmutableState.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tPatchOperation,\n\tOperationType,\n\tRemovePatchOperation,\n\tReplacePatchOperation,\n\tTestPatchOperation\n} from './Patch';\nimport { Pointer } from './Pointer';\nimport { MutableState, Path, State } from '../Store';\nimport { Map, List } from 'immutable';\n\nimport { getFriendlyDifferenceMessage, isEqual } from './compare';\n\nfunction isString(segment?: string): segment is string {\n\treturn typeof segment === 'string';\n}\n\nfunction isList(value?: any): value is List<any> {\n\treturn Boolean(value && List.isList(value));\n}\n\nfunction isMap(value?: any): value is Map<any, any> {\n\treturn Boolean(value && Map.isMap(value));\n}\n\nfunction inverse(operation: PatchOperation, state: Map<any, any>): PatchOperation[] {\n\tif (operation.op === OperationType.ADD) {\n\t\tconst op: RemovePatchOperation = {\n\t\t\top: OperationType.REMOVE,\n\t\t\tpath: operation.path\n\t\t};\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else if (operation.op === OperationType.REPLACE) {\n\t\tconst value = state.getIn(operation.path.segments);\n\t\tlet op: RemovePatchOperation | ReplacePatchOperation;\n\t\tif (value === undefined) {\n\t\t\top = {\n\t\t\t\top: OperationType.REMOVE,\n\t\t\t\tpath: operation.path\n\t\t\t};\n\t\t} else {\n\t\t\top = {\n\t\t\t\top: OperationType.REPLACE,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: state.getIn(operation.path.segments)\n\t\t\t};\n\t\t}\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else {\n\t\treturn [\n\t\t\t{\n\t\t\t\top: OperationType.ADD,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: state.getIn(operation.path.segments)\n\t\t\t}\n\t\t];\n\t}\n}\n\nexport class ImmutableState<T = any> implements MutableState<T> {\n\tprivate _state: Map<any, any> = Map();\n\n\t/**\n\t * Returns the state at a specific pointer path location.\n\t */\n\tpublic get = <U = any>(path: Path<T, U>): U => {\n\t\treturn path.value;\n\t};\n\n\tpublic at = <U = any>(path: Path<T, Array<U>>, index: number): Path<T, U> => {\n\t\tconst array = this.get(path);\n\t\tconst value = array && array[index];\n\n\t\treturn {\n\t\t\tpath: `${path.path}/${index}`,\n\t\t\tstate: path.state,\n\t\t\tvalue\n\t\t};\n\t};\n\n\tpublic path: State<T>['path'] = (path: string | Path<T, any>, ...segments: (string | undefined)[]) => {\n\t\tif (typeof path === 'string') {\n\t\t\tsegments = [path, ...segments];\n\t\t} else {\n\t\t\tsegments = [...new Pointer(path.path).segments, ...segments];\n\t\t}\n\n\t\tconst stringSegments = segments.filter<string>(isString);\n\t\tconst hasMultipleSegments = stringSegments.length > 1;\n\t\tconst pointer = new Pointer(hasMultipleSegments ? stringSegments : stringSegments[0] || '');\n\t\tlet value = this._state.getIn(pointer.segments);\n\n\t\tif (pointer.segments.length > 1 && pointer.segments[pointer.segments.length - 1] === 'length') {\n\t\t\tconst parent = pointer.segments.slice(0, pointer.segments.length - 1);\n\t\t\tconst parentState = this._state.getIn(parent);\n\t\t\tif (isList(parentState)) {\n\t\t\t\tvalue = parentState.size;\n\t\t\t}\n\t\t}\n\n\t\tif (isList(value) || isMap(value)) {\n\t\t\tvalue = value.toJS();\n\t\t}\n\n\t\treturn {\n\t\t\tpath: pointer.path,\n\t\t\tstate: this._state as any,\n\t\t\tvalue\n\t\t};\n\t};\n\n\tpublic apply(operations: PatchOperation<T>[]): PatchOperation<T>[] {\n\t\tlet undoOperations: PatchOperation<T>[] = [];\n\n\t\tconst patchedState = operations.reduce((state, next) => {\n\t\t\tlet patchedState;\n\t\t\tswitch (next.op) {\n\t\t\t\tcase OperationType.ADD:\n\t\t\t\t\tpatchedState = this.setIn(next.path.segments, next.value, state, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REPLACE:\n\t\t\t\t\tpatchedState = this.setIn(next.path.segments, next.value, state);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REMOVE:\n\t\t\t\t\tpatchedState = state.removeIn(next.path.segments);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.TEST:\n\t\t\t\t\tconst current = state.getIn(next.path.segments);\n\t\t\t\t\tconst currentValue = current && current.toJS ? current.toJS() : current;\n\t\t\t\t\tif (!isEqual(currentValue, next.value)) {\n\t\t\t\t\t\tconst location = next.path.path;\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Test operation failure at \"${location}\". ${getFriendlyDifferenceMessage(\n\t\t\t\t\t\t\t\tnext.value,\n\t\t\t\t\t\t\t\tcurrentValue\n\t\t\t\t\t\t\t)}.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn state;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown operation');\n\t\t\t}\n\t\t\tundoOperations = [...inverse(next, state), ...undoOperations];\n\t\t\treturn patchedState;\n\t\t}, this._state);\n\t\tthis._state = patchedState;\n\t\treturn undoOperations;\n\t}\n\n\tprivate setIn(segments: string[], value: any, state: Map<any, any>, add = false) {\n\t\tconst updated = this.set(segments, value, state, add);\n\t\tif (updated) {\n\t\t\treturn updated;\n\t\t}\n\n\t\tstate = state.withMutations((map) => {\n\t\t\tsegments.slice(0, segments.length - 1).forEach((segment, index) => {\n\t\t\t\tlet nextSegment: any = '';\n\t\t\t\tif (index + 1 < segments.length) {\n\t\t\t\t\tnextSegment = segments[index + 1];\n\t\t\t\t}\n\t\t\t\tconst value = state.getIn([...segments.slice(0, index), segment]);\n\t\t\t\tif (!value || !(value instanceof List || value instanceof Map)) {\n\t\t\t\t\tif (!isNaN(nextSegment) && !isNaN(parseInt(nextSegment, 0))) {\n\t\t\t\t\t\tmap = map.setIn([...segments.slice(0, index), segment], List());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap = map.setIn([...segments.slice(0, index), segment], Map());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.set(segments, value, state, add) || state;\n\t}\n\n\tprivate set(segments: string[], value: any, state: Map<any, any>, add = false) {\n\t\tif (typeof value === 'object' && value != null) {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue = List(value);\n\t\t\t} else {\n\t\t\t\tvalue = Map(value);\n\t\t\t}\n\t\t}\n\t\tsegments = segments.slice();\n\t\tconst allSegments = segments.slice();\n\t\tconst lastSegment: any = segments.pop();\n\t\tconst parent = state.getIn(segments);\n\n\t\tif (isList(parent) && add) {\n\t\t\tstate = state.setIn(segments, parent.insert(lastSegment, value));\n\n\t\t\treturn state;\n\t\t} else if (isList(parent) || isMap(parent)) {\n\t\t\tstate = state.setIn(allSegments, value);\n\n\t\t\treturn state;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}