{"version":3,"file":"ImmutableState.mjs","sourceRoot":"","sources":["ImmutableState.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tPatchOperation,\n\tOperationType,\n\tRemovePatchOperation,\n\tReplacePatchOperation,\n\tTestPatchOperation\n} from './Patch';\nimport { Pointer } from './Pointer';\nimport { MutableState, Path, State } from '../Store';\nimport { Map, List } from 'immutable';\n\nimport { getFriendlyDifferenceMessage, isEqual } from './compare';\n\nfunction isString(segment?: string): segment is string {\n\treturn typeof segment === 'string';\n}\n\nfunction isList(value?: any): value is List<any> {\n\treturn Boolean(value && List.isList(value));\n}\n\nfunction isMap(value?: any): value is Map<any, any> {\n\treturn Boolean(value && Map.isMap(value));\n}\n\nfunction inverse(operation: PatchOperation, state: Map<any, any>): PatchOperation[] {\n\tif (operation.op === OperationType.ADD) {\n\t\tconst op: RemovePatchOperation = {\n\t\t\top: OperationType.REMOVE,\n\t\t\tpath: operation.path\n\t\t};\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else if (operation.op === OperationType.REPLACE) {\n\t\tconst value = state.getIn(operation.path.segments);\n\t\tlet op: RemovePatchOperation | ReplacePatchOperation;\n\t\tif (value === undefined) {\n\t\t\top = {\n\t\t\t\top: OperationType.REMOVE,\n\t\t\t\tpath: operation.path\n\t\t\t};\n\t\t} else {\n\t\t\top = {\n\t\t\t\top: OperationType.REPLACE,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: state.getIn(operation.path.segments)\n\t\t\t};\n\t\t}\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else {\n\t\treturn [\n\t\t\t{\n\t\t\t\top: OperationType.ADD,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: state.getIn(operation.path.segments)\n\t\t\t}\n\t\t];\n\t}\n}\n\nexport class ImmutableState<T = any> implements MutableState<T> {\n\tprivate _state: Map<any, any> = Map();\n\n\t/**\n\t * Returns the state at a specific pointer path location.\n\t */\n\tpublic get = <U = any>(path: Path<T, U>): U => {\n\t\treturn path.value;\n\t};\n\n\tpublic at = <U = any>(path: Path<T, Array<U>>, index: number): Path<T, U> => {\n\t\tconst array = this.get(path);\n\t\tconst value = array && array[index];\n\n\t\treturn {\n\t\t\tpath: `${path.path}/${index}`,\n\t\t\tstate: path.state,\n\t\t\tvalue\n\t\t};\n\t};\n\n\tpublic path: State<T>['path'] = (path: string | Path<T, any>, ...segments: (string | undefined)[]) => {\n\t\tif (typeof path === 'string') {\n\t\t\tsegments = [path, ...segments];\n\t\t} else {\n\t\t\tsegments = [...new Pointer(path.path).segments, ...segments];\n\t\t}\n\n\t\tconst stringSegments = segments.filter<string>(isString);\n\t\tconst hasMultipleSegments = stringSegments.length > 1;\n\t\tconst pointer = new Pointer(hasMultipleSegments ? stringSegments : stringSegments[0] || '');\n\t\tlet value = this._state.getIn(pointer.segments);\n\n\t\tif (pointer.segments.length > 1 && pointer.segments[pointer.segments.length - 1] === 'length') {\n\t\t\tconst parent = pointer.segments.slice(0, pointer.segments.length - 1);\n\t\t\tconst parentState = this._state.getIn(parent);\n\t\t\tif (isList(parentState)) {\n\t\t\t\tvalue = parentState.size;\n\t\t\t}\n\t\t}\n\n\t\tif (isList(value) || isMap(value)) {\n\t\t\tvalue = value.toJS();\n\t\t}\n\n\t\treturn {\n\t\t\tpath: pointer.path,\n\t\t\tstate: this._state as any,\n\t\t\tvalue\n\t\t};\n\t};\n\n\tpublic apply(operations: PatchOperation<T>[]): PatchOperation<T>[] {\n\t\tlet undoOperations: PatchOperation<T>[] = [];\n\n\t\tconst patchedState = operations.reduce((state, next) => {\n\t\t\tlet patchedState;\n\t\t\tswitch (next.op) {\n\t\t\t\tcase OperationType.ADD:\n\t\t\t\t\tpatchedState = this.setIn(next.path.segments, next.value, state, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REPLACE:\n\t\t\t\t\tpatchedState = this.setIn(next.path.segments, next.value, state);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REMOVE:\n\t\t\t\t\tpatchedState = state.removeIn(next.path.segments);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.TEST:\n\t\t\t\t\tconst current = state.getIn(next.path.segments);\n\t\t\t\t\tconst currentValue = current && current.toJS ? current.toJS() : current;\n\t\t\t\t\tif (!isEqual(currentValue, next.value)) {\n\t\t\t\t\t\tconst location = next.path.path;\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Test operation failure at \"${location}\". ${getFriendlyDifferenceMessage(\n\t\t\t\t\t\t\t\tnext.value,\n\t\t\t\t\t\t\t\tcurrentValue\n\t\t\t\t\t\t\t)}.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn state;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown operation');\n\t\t\t}\n\t\t\tundoOperations = [...inverse(next, state), ...undoOperations];\n\t\t\treturn patchedState;\n\t\t}, this._state);\n\t\tthis._state = patchedState;\n\t\treturn undoOperations;\n\t}\n\n\tprivate setIn(segments: string[], value: any, state: Map<any, any>, add = false) {\n\t\tconst updated = this.set(segments, value, state, add);\n\t\tif (updated) {\n\t\t\treturn updated;\n\t\t}\n\n\t\tstate = state.withMutations((map) => {\n\t\t\tsegments.slice(0, segments.length - 1).forEach((segment, index) => {\n\t\t\t\tlet nextSegment: any = '';\n\t\t\t\tif (index + 1 < segments.length) {\n\t\t\t\t\tnextSegment = segments[index + 1];\n\t\t\t\t}\n\t\t\t\tconst value = state.getIn([...segments.slice(0, index), segment]);\n\t\t\t\tif (!value || !(value instanceof List || value instanceof Map)) {\n\t\t\t\t\tif (!isNaN(nextSegment) && !isNaN(parseInt(nextSegment, 0))) {\n\t\t\t\t\t\tmap = map.setIn([...segments.slice(0, index), segment], List());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap = map.setIn([...segments.slice(0, index), segment], Map());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.set(segments, value, state, add) || state;\n\t}\n\n\tprivate set(segments: string[], value: any, state: Map<any, any>, add = false) {\n\t\tif (typeof value === 'object' && value != null) {\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue = List(value);\n\t\t\t} else {\n\t\t\t\tvalue = Map(value);\n\t\t\t}\n\t\t}\n\t\tsegments = segments.slice();\n\t\tconst allSegments = segments.slice();\n\t\tconst lastSegment: any = segments.pop();\n\t\tconst parent = state.getIn(segments);\n\n\t\tif (isList(parent) && add) {\n\t\t\tstate = state.setIn(segments, parent.insert(lastSegment, value));\n\n\t\t\treturn state;\n\t\t} else if (isList(parent) || isMap(parent)) {\n\t\t\tstate = state.setIn(allSegments, value);\n\n\t\t\treturn state;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}