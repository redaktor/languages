{"version":3,"file":"Patch.mjs","sourceRoot":"","sources":["Patch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pointer, walk, PointerTarget } from './Pointer';\nimport { getFriendlyDifferenceMessage, isEqual } from './compare';\n\nexport enum OperationType {\n\tADD = 'add',\n\tREMOVE = 'remove',\n\tREPLACE = 'replace',\n\tTEST = 'test'\n}\n\nexport interface BaseOperation<T = any, U = any> {\n\top: OperationType;\n\tpath: Pointer<T, U>;\n}\n\nexport interface AddPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.ADD;\n\tvalue: U;\n}\n\nexport interface RemovePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REMOVE;\n}\n\nexport interface ReplacePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REPLACE;\n\tvalue: U;\n}\n\nexport interface TestPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.TEST;\n\tvalue: U;\n}\n\nexport type PatchOperation<T = any, U = any> =\n\t| AddPatchOperation<T, U>\n\t| RemovePatchOperation<T, U>\n\t| ReplacePatchOperation<T, U>\n\t| TestPatchOperation<T, U>;\n\nexport interface PatchResult<T = any, U = any> {\n\tobject: T;\n\tundoOperations: PatchOperation<T, U>[];\n}\n\nfunction add(pointerTarget: PointerTarget, value: any): any {\n\tlet index = parseInt(pointerTarget.segment, 10);\n\tif (Array.isArray(pointerTarget.target) && !isNaN(index)) {\n\t\tpointerTarget.target.splice(index, 0, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction replace(pointerTarget: PointerTarget, value: any): any {\n\tlet index = parseInt(pointerTarget.segment, 10);\n\tif (Array.isArray(pointerTarget.target) && !isNaN(index)) {\n\t\tpointerTarget.target.splice(index, 1, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction remove(pointerTarget: PointerTarget): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 1);\n\t} else {\n\t\tdelete pointerTarget.target[pointerTarget.segment];\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction inverse(operation: PatchOperation, state: any): PatchOperation[] {\n\tif (operation.op === OperationType.ADD) {\n\t\tconst op: RemovePatchOperation = {\n\t\t\top: OperationType.REMOVE,\n\t\t\tpath: operation.path\n\t\t};\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else if (operation.op === OperationType.REPLACE) {\n\t\tconst value = operation.path.get(state);\n\t\tlet op: RemovePatchOperation | ReplacePatchOperation;\n\t\tif (value === undefined) {\n\t\t\top = {\n\t\t\t\top: OperationType.REMOVE,\n\t\t\t\tpath: operation.path\n\t\t\t};\n\t\t} else {\n\t\t\top = {\n\t\t\t\top: OperationType.REPLACE,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t};\n\t\t}\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else {\n\t\treturn [\n\t\t\t{\n\t\t\t\top: OperationType.ADD,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t}\n\t\t];\n\t}\n}\n\nexport class Patch<T = any> {\n\tprivate _operations: PatchOperation<T>[];\n\n\tconstructor(operations: PatchOperation<T> | PatchOperation<T>[]) {\n\t\tthis._operations = Array.isArray(operations) ? operations : [operations];\n\t}\n\n\tpublic apply(object: any): PatchResult<T> {\n\t\tlet undoOperations: PatchOperation<T>[] = [];\n\t\tconst patchedObject = this._operations.reduce((patchedObject, next) => {\n\t\t\tlet object;\n\t\t\tconst pointerTarget = walk(next.path.segments, patchedObject);\n\t\t\tswitch (next.op) {\n\t\t\t\tcase OperationType.ADD:\n\t\t\t\t\tobject = add(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REPLACE:\n\t\t\t\t\tobject = replace(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REMOVE:\n\t\t\t\t\tobject = remove(pointerTarget);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.TEST:\n\t\t\t\t\tconst current = pointerTarget.target[pointerTarget.segment];\n\t\t\t\t\tif (!isEqual(current, next.value)) {\n\t\t\t\t\t\tconst location = next.path.path;\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Test operation failure at \"${location}\". ${getFriendlyDifferenceMessage(\n\t\t\t\t\t\t\t\tnext.value,\n\t\t\t\t\t\t\t\tcurrent\n\t\t\t\t\t\t\t)}.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn patchedObject;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown operation');\n\t\t\t}\n\t\t\tundoOperations = [...inverse(next, patchedObject), ...undoOperations];\n\t\t\treturn object;\n\t\t}, object);\n\t\treturn { object: patchedObject, undoOperations };\n\t}\n}\n"]}