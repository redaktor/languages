import { DNode } from '../core/interfaces';
import WidgetBase from '../core/WidgetBase';
export declare type PropertiesComparatorFunction = (actualProperties: any) => any;
export declare type TemplateChildren = DNode[] | (() => DNode[]);
export interface AssertionTemplateResult {
    (): DNode | DNode[];
    append(selector: string, children: TemplateChildren): AssertionTemplateResult;
    prepend(selector: string, children: TemplateChildren): AssertionTemplateResult;
    replaceChildren(selector: string, children: TemplateChildren): AssertionTemplateResult;
    insertBefore(selector: string, children: TemplateChildren): AssertionTemplateResult;
    insertAfter(selector: string, children: TemplateChildren): AssertionTemplateResult;
    insertSiblings(selector: string, children: TemplateChildren, type?: 'before' | 'after'): AssertionTemplateResult;
    setChildren(selector: string, children: TemplateChildren, type?: 'prepend' | 'replace' | 'append'): AssertionTemplateResult;
    setProperty(selector: string, property: string, value: any): AssertionTemplateResult;
    setProperties(selector: string, value: any | PropertiesComparatorFunction): AssertionTemplateResult;
    getChildren(selector: string): DNode[];
    getProperty(selector: string, property: string): any;
    getProperties(selector: string): any;
    replace(selector: string, node: DNode): AssertionTemplateResult;
    remove(selector: string): AssertionTemplateResult;
}
export declare class Ignore extends WidgetBase {
}
export declare function assertionTemplate(renderFunc: () => DNode | DNode[]): AssertionTemplateResult;
export default assertionTemplate;
