{"version":3,"file":"assertionTemplate.js","sourceRoot":"","sources":["assertionTemplate.ts"],"names":[],"mappings":"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","sourcesContent":["import select from './support/selector';\nimport { VNode, WNode, DNode } from '../core/interfaces';\nimport { isWNode, isVNode } from '../core/vdom';\nimport { decorate } from '../core/util';\nimport WidgetBase from '../core/WidgetBase';\n\nexport type PropertiesComparatorFunction = (actualProperties: any) => any;\n\nexport type TemplateChildren = DNode[] | (() => DNode[]);\n\nexport interface AssertionTemplateResult {\n\t(): DNode | DNode[];\n\tappend(selector: string, children: TemplateChildren): AssertionTemplateResult;\n\tprepend(selector: string, children: TemplateChildren): AssertionTemplateResult;\n\treplaceChildren(selector: string, children: TemplateChildren): AssertionTemplateResult;\n\tinsertBefore(selector: string, children: TemplateChildren): AssertionTemplateResult;\n\tinsertAfter(selector: string, children: TemplateChildren): AssertionTemplateResult;\n\tinsertSiblings(selector: string, children: TemplateChildren, type?: 'before' | 'after'): AssertionTemplateResult;\n\tsetChildren(\n\t\tselector: string,\n\t\tchildren: TemplateChildren,\n\t\ttype?: 'prepend' | 'replace' | 'append'\n\t): AssertionTemplateResult;\n\tsetProperty(selector: string, property: string, value: any): AssertionTemplateResult;\n\tsetProperties(selector: string, value: any | PropertiesComparatorFunction): AssertionTemplateResult;\n\tgetChildren(selector: string): DNode[];\n\tgetProperty(selector: string, property: string): any;\n\tgetProperties(selector: string): any;\n\treplace(selector: string, node: DNode): AssertionTemplateResult;\n\tremove(selector: string): AssertionTemplateResult;\n}\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst findOne = (nodes: DNode | DNode[], selector: string): NodeWithProperties => {\n\tlet finalSelector = selector;\n\tif (selector.indexOf('~') === 0) {\n\t\tfinalSelector = `[\\\\~key='${selector.substr(1)}']`;\n\t}\n\tlet [node] = select(finalSelector, nodes);\n\tif (!node) {\n\t\tfinalSelector = `[assertion-key='${selector.substr(1)}']`;\n\t\t[node] = select(finalSelector, nodes);\n\t}\n\tif (!node) {\n\t\tthrow Error(`Node not found for selector \"${selector}\"`);\n\t}\n\tif (!isWNode(node) && !isVNode(node)) {\n\t\tthrow Error('Cannot set or get on unknown node');\n\t}\n\treturn node;\n};\n\nconst replaceChildren = (\n\tselector: string,\n\trender: DNode | DNode[],\n\tmodifyChildrenFn: (index: number, children: DNode[]) => DNode[]\n): DNode | DNode[] => {\n\tconst node = findOne(render, selector);\n\tconst parent: (VNode | WNode) & { children: DNode[] } | undefined = (node as any).parent;\n\tconst siblings = parent ? parent.children : Array.isArray(render) ? render : [render];\n\tconst newChildren = modifyChildrenFn(siblings.indexOf(node), [...siblings]);\n\n\tif (!parent) {\n\t\treturn newChildren;\n\t}\n\n\tparent.children = newChildren;\n\treturn render;\n};\n\nexport class Ignore extends WidgetBase {}\n\nexport function assertionTemplate(renderFunc: () => DNode | DNode[]) {\n\tconst assertionTemplateResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tdecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t\tdelete (node as NodeWithProperties).properties['assertion-key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionTemplateResult.setProperty = (selector: string, property: string, value: any) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findOne(render, selector);\n\t\t\tnode.properties[property] = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.setProperties = (selector: string, value: any | PropertiesComparatorFunction) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findOne(render, selector);\n\t\t\tnode.properties = value;\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.append = (selector: string, children: TemplateChildren) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'append');\n\t};\n\tassertionTemplateResult.prepend = (selector: string, children: TemplateChildren) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'prepend');\n\t};\n\tassertionTemplateResult.replaceChildren = (selector: string, children: TemplateChildren) => {\n\t\treturn assertionTemplateResult.setChildren(selector, children, 'replace');\n\t};\n\tassertionTemplateResult.setChildren = (\n\t\tselector: string,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'prepend' | 'replace' | 'append' = 'replace'\n\t) => {\n\t\tif (Array.isArray(children)) {\n\t\t\tconsole.warn(\n\t\t\t\t'The array API (`children: DNode[]`) has been deprecated. Working with children should use a factory to avoid issues with mutation.'\n\t\t\t);\n\t\t}\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst node = findOne(render, selector);\n\t\t\tnode.children = node.children || [];\n\t\t\tif (typeof children === 'function') {\n\t\t\t\tchildren = children();\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'prepend':\n\t\t\t\t\tnode.children = [...children, ...node.children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'append':\n\t\t\t\t\tnode.children = [...node.children, ...children];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'replace':\n\t\t\t\t\tnode.children = [...children];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn render;\n\t\t});\n\t};\n\tassertionTemplateResult.insertBefore = (selector: string, children: TemplateChildren) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'before');\n\t};\n\tassertionTemplateResult.insertAfter = (selector: string, children: TemplateChildren) => {\n\t\treturn assertionTemplateResult.insertSiblings(selector, children, 'after');\n\t};\n\tassertionTemplateResult.insertSiblings = (\n\t\tselector: string,\n\t\tchildren: TemplateChildren,\n\t\ttype: 'before' | 'after' = 'after'\n\t) => {\n\t\tif (Array.isArray(children)) {\n\t\t\tconsole.warn(\n\t\t\t\t'The array API (`children: DNode[]`) has been deprecated. Working with children should use a factory to avoid issues with mutation.'\n\t\t\t);\n\t\t}\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\tconst insertedChildren = typeof children === 'function' ? (children = children()) : children;\n\t\t\treturn replaceChildren(selector, render, (index, children) => {\n\t\t\t\tif (type === 'after') {\n\t\t\t\t\tchildren.splice(index + 1, 0, ...insertedChildren);\n\t\t\t\t} else {\n\t\t\t\t\tchildren.splice(index, 0, ...insertedChildren);\n\t\t\t\t}\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionTemplateResult.getProperty = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findOne(render, selector);\n\t\treturn node.properties[property];\n\t};\n\tassertionTemplateResult.getProperties = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findOne(render, selector);\n\t\treturn node.properties;\n\t};\n\tassertionTemplateResult.getChildren = (selector: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = findOne(render, selector);\n\t\treturn node.children || [];\n\t};\n\tassertionTemplateResult.replace = (selector: string, newNode: DNode) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(selector, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1, newNode);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\tassertionTemplateResult.remove = (selector: string) => {\n\t\treturn assertionTemplate(() => {\n\t\t\tconst render = renderFunc();\n\t\t\treturn replaceChildren(selector, render, (index, children) => {\n\t\t\t\tchildren.splice(index, 1);\n\t\t\t\treturn children;\n\t\t\t});\n\t\t});\n\t};\n\treturn assertionTemplateResult as AssertionTemplateResult;\n}\n\nexport default assertionTemplate;\n"]}