(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../../core/vdom", "../../../core/middleware/resize", "../../../core/middleware/icache", "../../../core/middleware/breakpoint", "./resize"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../../../core/vdom");
    var resize_1 = require("../../../core/middleware/resize");
    var icache_1 = require("../../../core/middleware/icache");
    var breakpoint_1 = require("../../../core/middleware/breakpoint");
    var resize_2 = require("./resize");
    function createBreakpointMock(breakpoints) {
        if (breakpoints === void 0) { breakpoints = { SM: 0, MD: 576, LG: 768, XL: 960 }; }
        var mockBreakpoints = {};
        var defaultBreakpoints = breakpoints;
        var resizeMockFactory = resize_2.default();
        var factory = vdom_1.create({ resize: resize_1.default, node: vdom_1.node, destroy: vdom_1.destroy, icache: icache_1.default, invalidator: vdom_1.invalidator });
        var mockBreakpointFactory = factory(function (payload) {
            var id = payload.id, properties = payload.properties, children = payload.children;
            var callback = breakpoint_1.default().callback;
            var mock = callback({
                id: id,
                middleware: { resize: resizeMockFactory().callback(payload) },
                properties: properties,
                children: children
            });
            return {
                get: function (key, breakpoints) {
                    if (breakpoints === void 0) { breakpoints = defaultBreakpoints; }
                    var result = mock.get(key, breakpoints);
                    if (mockBreakpoints[key]) {
                        return {
                            breakpoint: mockBreakpoints[key].breakpoint || (result && result.breakpoint),
                            contentRect: result && result.contentRect
                        };
                    }
                    return null;
                }
            };
        });
        function mockBreakpoint(key, breakpointResult) {
            if (key && breakpointResult) {
                if (!mockBreakpoints[key]) {
                    mockBreakpoints[key] = breakpointResult.breakpoint;
                }
                resizeMockFactory(key, breakpointResult.contentRect);
            }
            else {
                return mockBreakpointFactory();
            }
        }
        return mockBreakpoint;
    }
    exports.createBreakpointMock = createBreakpointMock;
    exports.default = createBreakpointMock;
});
//# sourceMappingURL=breakpoint.js.map