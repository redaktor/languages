{"version":3,"file":"breakpoint.js","sourceRoot":"","sources":["breakpoint.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,2CAAwE;IACxE,0DAAqD;IACrD,0DAAqD;IACrD,kEAA8E;IAC9E,mCAAwC;IAGxC,SAAgB,oBAAoB,CAAC,WAA+D;QAA/D,4BAAA,EAAA,gBAA6B,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE;QACnG,IAAM,eAAe,GAAQ,EAAE,CAAC;QAChC,IAAM,kBAAkB,GAAG,WAAW,CAAC;QACvC,IAAM,iBAAiB,GAAG,gBAAgB,EAAE,CAAC;QAC7C,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,MAAM,kBAAA,EAAE,IAAI,aAAA,EAAE,OAAO,gBAAA,EAAE,MAAM,kBAAA,EAAE,WAAW,oBAAA,EAAE,CAAC,CAAC;QAEvE,IAAM,qBAAqB,GAAG,OAAO,CAAC,UAAC,OAAO;YACrC,IAAA,eAAE,EAAE,+BAAU,EAAE,2BAAQ,CAAa;YACrC,IAAA,0CAAQ,CAAkB;YAClC,IAAM,IAAI,GAAG,QAAQ,CAAC;gBACrB,EAAE,IAAA;gBACF,UAAU,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBAC7D,UAAU,YAAA;gBACV,QAAQ,UAAA;aACR,CAAC,CAAC;YAEH,OAAO;gBACN,GAAG,EAAH,UAAI,GAAoB,EAAE,WAA6C;oBAA7C,4BAAA,EAAA,gCAA6C;oBACtE,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;oBAC1C,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE;wBACzB,OAAO;4BACN,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC;4BAC5E,WAAW,EAAE,MAAM,IAAI,MAAM,CAAC,WAAW;yBACzC,CAAC;qBACF;oBACD,OAAO,IAAI,CAAC;gBACb,CAAC;aACD,CAAC;QACH,CAAC,CAAC,CAAC;QAUH,SAAS,cAAc,CACtB,GAAY,EACZ,gBAGC;YAED,IAAI,GAAG,IAAI,gBAAgB,EAAE;gBAC5B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;oBAC1B,eAAe,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,UAAU,CAAC;iBACnD;gBACD,iBAAiB,CAAC,GAAG,EAAE,gBAAgB,CAAC,WAAW,CAAC,CAAC;aACrD;iBAAM;gBACN,OAAO,qBAAqB,EAAE,CAAC;aAC/B;QACF,CAAC;QAED,OAAO,cAAc,CAAC;IACvB,CAAC;IAxDD,oDAwDC;IAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import { create, destroy, invalidator, node } from '../../../core/vdom';\nimport resize from '../../../core/middleware/resize';\nimport icache from '../../../core/middleware/icache';\nimport breakpoint, { Breakpoints } from '../../../core/middleware/breakpoint';\nimport createResizeMock from './resize';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createBreakpointMock(breakpoints: Breakpoints = { SM: 0, MD: 576, LG: 768, XL: 960 }) {\n\tconst mockBreakpoints: any = {};\n\tconst defaultBreakpoints = breakpoints;\n\tconst resizeMockFactory = createResizeMock();\n\tconst factory = create({ resize, node, destroy, icache, invalidator });\n\n\tconst mockBreakpointFactory = factory((payload) => {\n\t\tconst { id, properties, children } = payload;\n\t\tconst { callback } = breakpoint();\n\t\tconst mock = callback({\n\t\t\tid,\n\t\t\tmiddleware: { resize: resizeMockFactory().callback(payload) },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\n\t\treturn {\n\t\t\tget(key: string | number, breakpoints: Breakpoints = defaultBreakpoints) {\n\t\t\t\tconst result = mock.get(key, breakpoints);\n\t\t\t\tif (mockBreakpoints[key]) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tbreakpoint: mockBreakpoints[key].breakpoint || (result && result.breakpoint),\n\t\t\t\t\t\tcontentRect: result && result.contentRect\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction mockBreakpoint(): MiddlewareResult<any, any, any>;\n\tfunction mockBreakpoint(\n\t\tkey: string,\n\t\tbreakpointResult: {\n\t\t\tbreakpoint: string;\n\t\t\tcontentRect: Partial<DOMRectReadOnly>;\n\t\t}\n\t): void;\n\tfunction mockBreakpoint(\n\t\tkey?: string,\n\t\tbreakpointResult?: {\n\t\t\tbreakpoint: string;\n\t\t\tcontentRect: Partial<DOMRectReadOnly>;\n\t\t}\n\t): void | MiddlewareResult<any, any, any> {\n\t\tif (key && breakpointResult) {\n\t\t\tif (!mockBreakpoints[key]) {\n\t\t\t\tmockBreakpoints[key] = breakpointResult.breakpoint;\n\t\t\t}\n\t\t\tresizeMockFactory(key, breakpointResult.contentRect);\n\t\t} else {\n\t\t\treturn mockBreakpointFactory();\n\t\t}\n\t}\n\n\treturn mockBreakpoint;\n}\n\nexport default createBreakpointMock;\n"]}