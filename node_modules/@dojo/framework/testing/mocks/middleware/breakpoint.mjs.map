{"version":3,"file":"breakpoint.mjs","sourceRoot":"","sources":["breakpoint.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,MAAM,MAAM,iCAAiC,CAAC;AACrD,OAAO,MAAM,MAAM,iCAAiC,CAAC;AACrD,OAAO,UAA2B,MAAM,qCAAqC,CAAC;AAC9E,OAAO,gBAAgB,MAAM,UAAU,CAAC;AAGxC,MAAM,UAAU,oBAAoB,CAAC,cAA2B,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE;IACnG,MAAM,eAAe,GAAQ,EAAE,CAAC;IAChC,MAAM,kBAAkB,GAAG,WAAW,CAAC;IACvC,MAAM,iBAAiB,GAAG,gBAAgB,EAAE,CAAC;IAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAEvE,MAAM,qBAAqB,GAAG,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACjD,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,QAAQ,CAAC;YACrB,EAAE;YACF,UAAU,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC7D,UAAU;YACV,QAAQ;SACR,CAAC,CAAC;QAEH,OAAO;YACN,GAAG,CAAC,GAAoB,EAAE,cAA2B,kBAAkB;gBACtE,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;gBAC1C,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE;oBACzB,OAAO;wBACN,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC;wBAC5E,WAAW,EAAE,MAAM,IAAI,MAAM,CAAC,WAAW;qBACzC,CAAC;iBACF;gBACD,OAAO,IAAI,CAAC;YACb,CAAC;SACD,CAAC;IACH,CAAC,CAAC,CAAC;IAUH,SAAS,cAAc,CACtB,GAAY,EACZ,gBAGC;QAED,IAAI,GAAG,IAAI,gBAAgB,EAAE;YAC5B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;gBAC1B,eAAe,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,UAAU,CAAC;aACnD;YACD,iBAAiB,CAAC,GAAG,EAAE,gBAAgB,CAAC,WAAW,CAAC,CAAC;SACrD;aAAM;YACN,OAAO,qBAAqB,EAAE,CAAC;SAC/B;IACF,CAAC;IAED,OAAO,cAAc,CAAC;AACvB,CAAC;AAED,eAAe,oBAAoB,CAAC","sourcesContent":["import { create, destroy, invalidator, node } from '../../../core/vdom';\nimport resize from '../../../core/middleware/resize';\nimport icache from '../../../core/middleware/icache';\nimport breakpoint, { Breakpoints } from '../../../core/middleware/breakpoint';\nimport createResizeMock from './resize';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createBreakpointMock(breakpoints: Breakpoints = { SM: 0, MD: 576, LG: 768, XL: 960 }) {\n\tconst mockBreakpoints: any = {};\n\tconst defaultBreakpoints = breakpoints;\n\tconst resizeMockFactory = createResizeMock();\n\tconst factory = create({ resize, node, destroy, icache, invalidator });\n\n\tconst mockBreakpointFactory = factory((payload) => {\n\t\tconst { id, properties, children } = payload;\n\t\tconst { callback } = breakpoint();\n\t\tconst mock = callback({\n\t\t\tid,\n\t\t\tmiddleware: { resize: resizeMockFactory().callback(payload) },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\n\t\treturn {\n\t\t\tget(key: string | number, breakpoints: Breakpoints = defaultBreakpoints) {\n\t\t\t\tconst result = mock.get(key, breakpoints);\n\t\t\t\tif (mockBreakpoints[key]) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tbreakpoint: mockBreakpoints[key].breakpoint || (result && result.breakpoint),\n\t\t\t\t\t\tcontentRect: result && result.contentRect\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction mockBreakpoint(): MiddlewareResult<any, any, any>;\n\tfunction mockBreakpoint(\n\t\tkey: string,\n\t\tbreakpointResult: {\n\t\t\tbreakpoint: string;\n\t\t\tcontentRect: Partial<DOMRectReadOnly>;\n\t\t}\n\t): void;\n\tfunction mockBreakpoint(\n\t\tkey?: string,\n\t\tbreakpointResult?: {\n\t\t\tbreakpoint: string;\n\t\t\tcontentRect: Partial<DOMRectReadOnly>;\n\t\t}\n\t): void | MiddlewareResult<any, any, any> {\n\t\tif (key && breakpointResult) {\n\t\t\tif (!mockBreakpoints[key]) {\n\t\t\t\tmockBreakpoints[key] = breakpointResult.breakpoint;\n\t\t\t}\n\t\t\tresizeMockFactory(key, breakpointResult.contentRect);\n\t\t} else {\n\t\t\treturn mockBreakpointFactory();\n\t\t}\n\t}\n\n\treturn mockBreakpoint;\n}\n\nexport default createBreakpointMock;\n"]}