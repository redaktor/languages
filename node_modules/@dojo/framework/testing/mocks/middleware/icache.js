(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../../core/vdom", "../../../core/middleware/cache", "../../../core/middleware/icache", "../../../shim/Map"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vdom_1 = require("../../../core/vdom");
    var cache_1 = require("../../../core/middleware/cache");
    var icache_1 = require("../../../core/middleware/icache");
    var Map_1 = require("../../../shim/Map");
    function createICacheMock() {
        var map = new Map_1.default();
        var factory = vdom_1.create({ cache: cache_1.cache, invalidator: vdom_1.invalidator });
        var mockICacheFactory = factory(function (_a) {
            var id = _a.id, middleware = _a.middleware, properties = _a.properties, children = _a.children;
            var callback = icache_1.icache().callback;
            var icacheMiddleware = callback({
                id: id,
                middleware: { invalidator: middleware.invalidator, cache: middleware.cache },
                properties: properties,
                children: children
            });
            var setter = icacheMiddleware.set;
            icacheMiddleware.set = function (key, value) {
                if (typeof value === 'function') {
                    value = value();
                    if (value && typeof value.then === 'function') {
                        map.set(key, value);
                        setter(key, function () { return value; });
                        return;
                    }
                }
                setter(key, value);
            };
            return icacheMiddleware;
        });
        function mockCache(key) {
            if (key) {
                if (map.has(key)) {
                    return map.get(key);
                }
                else {
                    return Promise.resolve(undefined);
                }
            }
            else {
                return mockICacheFactory();
            }
        }
        return mockCache;
    }
    exports.createICacheMock = createICacheMock;
    exports.default = createICacheMock;
});
//# sourceMappingURL=icache.js.map