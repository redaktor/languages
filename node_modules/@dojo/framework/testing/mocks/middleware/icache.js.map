{"version":3,"file":"icache.js","sourceRoot":"","sources":["icache.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,2CAAyD;IAEzD,wDAAuD;IACvD,0DAAyD;IACzD,yCAAoC;IAEpC,SAAgB,gBAAgB;QAC/B,IAAM,GAAG,GAAG,IAAI,aAAG,EAAe,CAAC;QACnC,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,KAAK,eAAA,EAAE,WAAW,oBAAA,EAAE,CAAC,CAAC;QAC/C,IAAM,iBAAiB,GAAG,OAAO,CAAC,UAAC,EAAwC;gBAAtC,UAAE,EAAE,0BAAU,EAAE,0BAAU,EAAE,sBAAQ;YAChE,IAAA,qCAAQ,CAAc;YAC9B,IAAM,gBAAgB,GAAG,QAAQ,CAAC;gBACjC,EAAE,IAAA;gBACF,UAAU,EAAE,EAAE,WAAW,EAAE,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE;gBAC5E,UAAU,YAAA;gBACV,QAAQ,UAAA;aACR,CAAC,CAAC;YACH,IAAM,MAAM,GAAG,gBAAgB,CAAC,GAAG,CAAC;YAEpC,gBAAgB,CAAC,GAAG,GAAG,UAAC,GAAQ,EAAE,KAAU;gBAC3C,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;oBAChC,KAAK,GAAG,KAAK,EAAE,CAAC;oBAChB,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;wBAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wBACpB,MAAM,CAAC,GAAG,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;wBACzB,OAAO;qBACP;iBACD;gBAED,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACpB,CAAC,CAAC;YAEF,OAAO,gBAAgB,CAAC;QACzB,CAAC,CAAC,CAAC;QAIH,SAAS,SAAS,CAAC,GAAY;YAC9B,IAAI,GAAG,EAAE;gBACR,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBACjB,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBACpB;qBAAM;oBACN,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;iBAClC;aACD;iBAAM;gBACN,OAAO,iBAAiB,EAAE,CAAC;aAC3B;QACF,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IA5CD,4CA4CC;IAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import { create, invalidator } from '../../../core/vdom';\nimport { MiddlewareResult } from '../../../core/interfaces';\nimport { cache } from '../../../core/middleware/cache';\nimport { icache } from '../../../core/middleware/icache';\nimport Map from '../../../shim/Map';\n\nexport function createICacheMock() {\n\tconst map = new Map<string, any>();\n\tconst factory = create({ cache, invalidator });\n\tconst mockICacheFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = icache();\n\t\tconst icacheMiddleware = callback({\n\t\t\tid,\n\t\t\tmiddleware: { invalidator: middleware.invalidator, cache: middleware.cache },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t\tconst setter = icacheMiddleware.set;\n\n\t\ticacheMiddleware.set = (key: any, value: any) => {\n\t\t\tif (typeof value === 'function') {\n\t\t\t\tvalue = value();\n\t\t\t\tif (value && typeof value.then === 'function') {\n\t\t\t\t\tmap.set(key, value);\n\t\t\t\t\tsetter(key, () => value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetter(key, value);\n\t\t};\n\n\t\treturn icacheMiddleware;\n\t});\n\n\tfunction mockCache(): MiddlewareResult<any, any, any>;\n\tfunction mockCache(key: string): Promise<any>;\n\tfunction mockCache(key?: string): Promise<any> | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (map.has(key)) {\n\t\t\t\treturn map.get(key);\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockICacheFactory();\n\t\t}\n\t}\n\n\treturn mockCache;\n}\n\nexport default createICacheMock;\n"]}