{"version":3,"file":"icache.mjs","sourceRoot":"","sources":["icache.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAEzD,OAAO,EAAE,KAAK,EAAE,MAAM,gCAAgC,CAAC;AACvD,OAAO,EAAE,MAAM,EAAE,MAAM,iCAAiC,CAAC;AACzD,OAAO,GAAG,MAAM,mBAAmB,CAAC;AAEpC,MAAM,UAAU,gBAAgB;IAC/B,MAAM,GAAG,GAAG,IAAI,GAAG,EAAe,CAAC;IACnC,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;IAC/C,MAAM,iBAAiB,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;QAC9E,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,EAAE,CAAC;QAC9B,MAAM,gBAAgB,GAAG,QAAQ,CAAC;YACjC,EAAE;YACF,UAAU,EAAE,EAAE,WAAW,EAAE,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE;YAC5E,UAAU;YACV,QAAQ;SACR,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,gBAAgB,CAAC,GAAG,CAAC;QAEpC,gBAAgB,CAAC,GAAG,GAAG,CAAC,GAAQ,EAAE,KAAU,EAAE,EAAE;YAC/C,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;gBAChC,KAAK,GAAG,KAAK,EAAE,CAAC;gBAChB,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBACpB,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;oBACzB,OAAO;iBACP;aACD;YAED,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC;QAEF,OAAO,gBAAgB,CAAC;IACzB,CAAC,CAAC,CAAC;IAIH,SAAS,SAAS,CAAC,GAAY;QAC9B,IAAI,GAAG,EAAE;YACR,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACjB,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACN,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAClC;SACD;aAAM;YACN,OAAO,iBAAiB,EAAE,CAAC;SAC3B;IACF,CAAC;IAED,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["import { create, invalidator } from '../../../core/vdom';\nimport { MiddlewareResult } from '../../../core/interfaces';\nimport { cache } from '../../../core/middleware/cache';\nimport { icache } from '../../../core/middleware/icache';\nimport Map from '../../../shim/Map';\n\nexport function createICacheMock() {\n\tconst map = new Map<string, any>();\n\tconst factory = create({ cache, invalidator });\n\tconst mockICacheFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = icache();\n\t\tconst icacheMiddleware = callback({\n\t\t\tid,\n\t\t\tmiddleware: { invalidator: middleware.invalidator, cache: middleware.cache },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t\tconst setter = icacheMiddleware.set;\n\n\t\ticacheMiddleware.set = (key: any, value: any) => {\n\t\t\tif (typeof value === 'function') {\n\t\t\t\tvalue = value();\n\t\t\t\tif (value && typeof value.then === 'function') {\n\t\t\t\t\tmap.set(key, value);\n\t\t\t\t\tsetter(key, () => value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetter(key, value);\n\t\t};\n\n\t\treturn icacheMiddleware;\n\t});\n\n\tfunction mockCache(): MiddlewareResult<any, any, any>;\n\tfunction mockCache(key: string): Promise<any>;\n\tfunction mockCache(key?: string): Promise<any> | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (map.has(key)) {\n\t\t\t\treturn map.get(key);\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockICacheFactory();\n\t\t}\n\t}\n\n\treturn mockCache;\n}\n\nexport default createICacheMock;\n"]}