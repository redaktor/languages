(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../../shim/global", "../../../core/vdom", "../../../core/middleware/cache", "../../../core/middleware/intersection"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var global_1 = require("../../../shim/global");
    var vdom_1 = require("../../../core/vdom");
    var cache_1 = require("../../../core/middleware/cache");
    var intersection_1 = require("../../../core/middleware/intersection");
    function createIntersectionMock() {
        var mockNodes = {};
        var refMap = new Map();
        var mockNode = {
            get: function (key) {
                return mockNodes[key];
            }
        };
        var invalidate;
        var factory = vdom_1.create({ destroy: vdom_1.destroy, cache: cache_1.default, invalidator: vdom_1.invalidator });
        var mockIntersectionFactory = factory(function (_a) {
            var id = _a.id, middleware = _a.middleware, properties = _a.properties, children = _a.children;
            var callback = intersection_1.default().callback;
            invalidate = middleware.invalidator;
            return callback({ id: id, middleware: tslib_1.__assign({}, middleware, { node: mockNode }), properties: properties, children: children });
        });
        global_1.default.IntersectionObserver = /** @class */ (function () {
            function MockIntersection(cb) {
                this._cb = cb;
            }
            MockIntersection.prototype.observe = function (ref) {
                this._ref = ref;
                refMap.set(ref, this);
                this._cb([tslib_1.__assign({}, ref, { target: this._ref })]);
            };
            MockIntersection.prototype.intersection = function (intersectionDetails) {
                this._cb([tslib_1.__assign({}, intersectionDetails, { target: this._ref })]);
            };
            return MockIntersection;
        }());
        function mockIntersection(key, intersectionDetails) {
            if (key) {
                if (!mockNodes[key]) {
                    mockNodes[key] = intersectionDetails;
                }
                var ref = mockNodes[key];
                var mock = refMap.get(ref);
                if (mock) {
                    mock.intersection(intersectionDetails);
                }
                else {
                    invalidate && invalidate();
                }
            }
            else {
                return mockIntersectionFactory();
            }
        }
        return mockIntersection;
    }
    exports.createIntersectionMock = createIntersectionMock;
    exports.default = createIntersectionMock;
});
//# sourceMappingURL=intersection.js.map