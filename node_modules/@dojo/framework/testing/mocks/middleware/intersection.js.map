{"version":3,"file":"intersection.js","sourceRoot":"","sources":["intersection.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+CAA0C;IAC1C,2CAAkE;IAClE,wDAAmD;IACnD,sEAAiE;IAIjE,SAAgB,sBAAsB;QACrC,IAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,IAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAM,QAAQ,GAAG;YAChB,GAAG,EAAH,UAAI,GAAW;gBACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;SACD,CAAC;QACF,IAAI,UAAkC,CAAC;QAEvC,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,OAAO,gBAAA,EAAE,KAAK,iBAAA,EAAE,WAAW,oBAAA,EAAE,CAAC,CAAC;QAExD,IAAM,uBAAuB,GAAG,OAAO,CAAC,UAAC,EAAwC;gBAAtC,UAAE,EAAE,0BAAU,EAAE,0BAAU,EAAE,sBAAQ;YACtE,IAAA,4CAAQ,CAAoB;YACpC,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;YACpC,OAAO,QAAQ,CAAC,EAAE,EAAE,IAAA,EAAE,UAAU,uBAAO,UAAU,IAAE,IAAI,EAAE,QAAQ,GAAE,EAAE,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,gBAAM,CAAC,oBAAoB;YAG1B,0BAAY,EAAO;gBAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACf,CAAC;YACM,kCAAO,GAAd,UAAe,GAAQ;gBACtB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAChB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,GAAG,CAAC,sBAAM,GAAG,IAAE,MAAM,EAAE,IAAI,CAAC,IAAI,IAAG,CAAC,CAAC;YAC3C,CAAC;YACM,uCAAY,GAAnB,UAAoB,mBAAuC;gBAC1D,IAAI,CAAC,GAAG,CAAC,sBAAM,mBAAmB,IAAE,MAAM,EAAE,IAAI,CAAC,IAAI,IAAG,CAAC,CAAC;YAC3D,CAAC;YACF,uBAAC;QAAD,CAAC,AAd6B,GAc7B,CAAC;QAIF,SAAS,gBAAgB,CACxB,GAAY,EACZ,mBAAiD;YAEjD,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAC;iBACrC;gBACD,IAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC7B,IAAI,IAAI,EAAE;oBACT,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;iBACvC;qBAAM;oBACN,UAAU,IAAI,UAAU,EAAE,CAAC;iBAC3B;aACD;iBAAM;gBACN,OAAO,uBAAuB,EAAE,CAAC;aACjC;QACF,CAAC;QAED,OAAO,gBAAgB,CAAC;IACzB,CAAC;IAzDD,wDAyDC;IAED,kBAAe,sBAAsB,CAAC","sourcesContent":["import global from '../../../shim/global';\nimport { create, destroy, invalidator } from '../../../core/vdom';\nimport cache from '../../../core/middleware/cache';\nimport intersection from '../../../core/middleware/intersection';\nimport { ExtendedIntersectionObserverEntry, IntersectionResult } from '../../../core/meta/Intersection';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createIntersectionMock() {\n\tconst mockNodes: any = {};\n\tconst refMap = new Map();\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\tlet invalidate: () => void | undefined;\n\n\tconst factory = create({ destroy, cache, invalidator });\n\n\tconst mockIntersectionFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = intersection();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({ id, middleware: { ...middleware, node: mockNode }, properties, children });\n\t});\n\n\tglobal.IntersectionObserver = class MockIntersection {\n\t\tprivate _cb: (entries: Partial<ExtendedIntersectionObserverEntry>[]) => void;\n\t\tprivate _ref: any;\n\t\tconstructor(cb: any) {\n\t\t\tthis._cb = cb;\n\t\t}\n\t\tpublic observe(ref: any) {\n\t\t\tthis._ref = ref;\n\t\t\trefMap.set(ref, this);\n\t\t\tthis._cb([{ ...ref, target: this._ref }]);\n\t\t}\n\t\tpublic intersection(intersectionDetails: IntersectionResult) {\n\t\t\tthis._cb([{ ...intersectionDetails, target: this._ref }]);\n\t\t}\n\t};\n\n\tfunction mockIntersection(): MiddlewareResult<any, any, any>;\n\tfunction mockIntersection(key: string, intersectionDetails: Partial<IntersectionResult>): void;\n\tfunction mockIntersection(\n\t\tkey?: string,\n\t\tintersectionDetails?: Partial<IntersectionResult>\n\t): void | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (!mockNodes[key]) {\n\t\t\t\tmockNodes[key] = intersectionDetails;\n\t\t\t}\n\t\t\tconst ref = mockNodes[key];\n\t\t\tconst mock = refMap.get(ref);\n\t\t\tif (mock) {\n\t\t\t\tmock.intersection(intersectionDetails);\n\t\t\t} else {\n\t\t\t\tinvalidate && invalidate();\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockIntersectionFactory();\n\t\t}\n\t}\n\n\treturn mockIntersection;\n}\n\nexport default createIntersectionMock;\n"]}