{"version":3,"file":"intersection.mjs","sourceRoot":"","sources":["intersection.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,KAAK,MAAM,gCAAgC,CAAC;AACnD,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAIjE,MAAM,UAAU,sBAAsB;IACrC,MAAM,SAAS,GAAQ,EAAE,CAAC;IAC1B,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,MAAM,QAAQ,GAAG;QAChB,GAAG,CAAC,GAAW;YACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;KACD,CAAC;IACF,IAAI,UAAkC,CAAC;IAEvC,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;IAExD,MAAM,uBAAuB,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;QACpF,MAAM,EAAE,QAAQ,EAAE,GAAG,YAAY,EAAE,CAAC;QACpC,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,UAAU,oBAAO,UAAU,IAAE,IAAI,EAAE,QAAQ,GAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,oBAAoB,GAAG,MAAM,gBAAgB;QAGnD,YAAY,EAAO;YAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,CAAC;QACM,OAAO,CAAC,GAAQ;YACtB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,mBAAM,GAAG,IAAE,MAAM,EAAE,IAAI,CAAC,IAAI,IAAG,CAAC,CAAC;QAC3C,CAAC;QACM,YAAY,CAAC,mBAAuC;YAC1D,IAAI,CAAC,GAAG,CAAC,mBAAM,mBAAmB,IAAE,MAAM,EAAE,IAAI,CAAC,IAAI,IAAG,CAAC,CAAC;QAC3D,CAAC;KACD,CAAC;IAIF,SAAS,gBAAgB,CACxB,GAAY,EACZ,mBAAiD;QAEjD,IAAI,GAAG,EAAE;YACR,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAC;aACrC;YACD,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,IAAI,EAAE;gBACT,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;aACvC;iBAAM;gBACN,UAAU,IAAI,UAAU,EAAE,CAAC;aAC3B;SACD;aAAM;YACN,OAAO,uBAAuB,EAAE,CAAC;SACjC;IACF,CAAC;IAED,OAAO,gBAAgB,CAAC;AACzB,CAAC;AAED,eAAe,sBAAsB,CAAC","sourcesContent":["import global from '../../../shim/global';\nimport { create, destroy, invalidator } from '../../../core/vdom';\nimport cache from '../../../core/middleware/cache';\nimport intersection from '../../../core/middleware/intersection';\nimport { ExtendedIntersectionObserverEntry, IntersectionResult } from '../../../core/meta/Intersection';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createIntersectionMock() {\n\tconst mockNodes: any = {};\n\tconst refMap = new Map();\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\tlet invalidate: () => void | undefined;\n\n\tconst factory = create({ destroy, cache, invalidator });\n\n\tconst mockIntersectionFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = intersection();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({ id, middleware: { ...middleware, node: mockNode }, properties, children });\n\t});\n\n\tglobal.IntersectionObserver = class MockIntersection {\n\t\tprivate _cb: (entries: Partial<ExtendedIntersectionObserverEntry>[]) => void;\n\t\tprivate _ref: any;\n\t\tconstructor(cb: any) {\n\t\t\tthis._cb = cb;\n\t\t}\n\t\tpublic observe(ref: any) {\n\t\t\tthis._ref = ref;\n\t\t\trefMap.set(ref, this);\n\t\t\tthis._cb([{ ...ref, target: this._ref }]);\n\t\t}\n\t\tpublic intersection(intersectionDetails: IntersectionResult) {\n\t\t\tthis._cb([{ ...intersectionDetails, target: this._ref }]);\n\t\t}\n\t};\n\n\tfunction mockIntersection(): MiddlewareResult<any, any, any>;\n\tfunction mockIntersection(key: string, intersectionDetails: Partial<IntersectionResult>): void;\n\tfunction mockIntersection(\n\t\tkey?: string,\n\t\tintersectionDetails?: Partial<IntersectionResult>\n\t): void | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (!mockNodes[key]) {\n\t\t\t\tmockNodes[key] = intersectionDetails;\n\t\t\t}\n\t\t\tconst ref = mockNodes[key];\n\t\t\tconst mock = refMap.get(ref);\n\t\t\tif (mock) {\n\t\t\t\tmock.intersection(intersectionDetails);\n\t\t\t} else {\n\t\t\t\tinvalidate && invalidate();\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockIntersectionFactory();\n\t\t}\n\t}\n\n\treturn mockIntersection;\n}\n\nexport default createIntersectionMock;\n"]}