(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../../shim/global", "../../../core/vdom", "../../../core/middleware/icache", "../../../core/middleware/resize"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var global_1 = require("../../../shim/global");
    var vdom_1 = require("../../../core/vdom");
    var icache_1 = require("../../../core/middleware/icache");
    var resize_1 = require("../../../core/middleware/resize");
    function createResizeMock() {
        var mockNodes = {};
        var refMap = new Map();
        var mockNode = {
            get: function (key) {
                return mockNodes[key];
            }
        };
        var invalidate;
        var factory = vdom_1.create({ destroy: vdom_1.destroy, icache: icache_1.default, invalidator: vdom_1.invalidator });
        var mockResizeFactory = factory(function (_a) {
            var id = _a.id, middleware = _a.middleware, properties = _a.properties, children = _a.children;
            var callback = resize_1.default().callback;
            invalidate = middleware.invalidator;
            return callback({
                id: id,
                middleware: { destroy: middleware.destroy, icache: middleware.icache, node: mockNode },
                properties: properties,
                children: children
            });
        });
        global_1.default.ResizeObserver = /** @class */ (function () {
            function MockResize(cb) {
                this._cb = cb;
            }
            MockResize.prototype.observe = function (ref) {
                this._ref = ref;
                refMap.set(ref, this);
                this._cb([{ contentRect: ref, target: this._ref }], this);
            };
            MockResize.prototype.unobserve = function () { };
            MockResize.prototype.disconnect = function () { };
            MockResize.prototype.resize = function (contentRect) {
                this._cb([{ contentRect: contentRect, target: this._ref }], this);
            };
            return MockResize;
        }());
        function mockResize(key, contentRect) {
            if (key) {
                if (!mockNodes[key]) {
                    mockNodes[key] = contentRect;
                }
                var ref = mockNodes[key];
                var mock = refMap.get(ref);
                if (mock) {
                    mock.resize(contentRect);
                }
                else {
                    invalidate && invalidate();
                }
            }
            else {
                return mockResizeFactory();
            }
        }
        return mockResize;
    }
    exports.createResizeMock = createResizeMock;
    exports.default = createResizeMock;
});
//# sourceMappingURL=resize.js.map