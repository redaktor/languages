{"version":3,"file":"resize.js","sourceRoot":"","sources":["resize.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,+CAA0C;IAC1C,2CAAkE;IAClE,0DAAqD;IACrD,0DAAqD;IAGrD,SAAgB,gBAAgB;QAC/B,IAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,IAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAM,QAAQ,GAAG;YAChB,GAAG,EAAH,UAAI,GAAW;gBACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;SACD,CAAC;QACF,IAAI,UAAkC,CAAC;QAEvC,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,OAAO,gBAAA,EAAE,MAAM,kBAAA,EAAE,WAAW,oBAAA,EAAE,CAAC,CAAC;QAEzD,IAAM,iBAAiB,GAAG,OAAO,CAAC,UAAC,EAAwC;gBAAtC,UAAE,EAAE,0BAAU,EAAE,0BAAU,EAAE,sBAAQ;YAChE,IAAA,sCAAQ,CAAc;YAC9B,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;YACpC,OAAO,QAAQ,CAAC;gBACf,EAAE,IAAA;gBACF,UAAU,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACtF,UAAU,YAAA;gBACV,QAAQ,UAAA;aACR,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,gBAAM,CAAC,cAAc;YAGpB,oBAAY,EAAO;gBAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACf,CAAC;YACM,4BAAO,GAAd,UAAe,GAAQ;gBACtB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAChB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3D,CAAC;YACM,8BAAS,GAAhB,cAAoB,CAAC;YAEd,+BAAU,GAAjB,cAAqB,CAAC;YAEf,2BAAM,GAAb,UAAc,WAA4B;gBACzC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,aAAA,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACtD,CAAC;YACF,iBAAC;QAAD,CAAC,AAlBuB,GAkBvB,CAAC;QAIF,SAAS,UAAU,CAAC,GAAY,EAAE,WAAsC;YACvE,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;oBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;iBAC7B;gBACD,IAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC7B,IAAI,IAAI,EAAE;oBACT,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;iBACzB;qBAAM;oBACN,UAAU,IAAI,UAAU,EAAE,CAAC;iBAC3B;aACD;iBAAM;gBACN,OAAO,iBAAiB,EAAE,CAAC;aAC3B;QACF,CAAC;QAED,OAAO,UAAU,CAAC;IACnB,CAAC;IA/DD,4CA+DC;IAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import global from '../../../shim/global';\nimport { create, destroy, invalidator } from '../../../core/vdom';\nimport icache from '../../../core/middleware/icache';\nimport resize from '../../../core/middleware/resize';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createResizeMock() {\n\tconst mockNodes: any = {};\n\tconst refMap = new Map();\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\tlet invalidate: () => void | undefined;\n\n\tconst factory = create({ destroy, icache, invalidator });\n\n\tconst mockResizeFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = resize();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({\n\t\t\tid,\n\t\t\tmiddleware: { destroy: middleware.destroy, icache: middleware.icache, node: mockNode },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t});\n\n\tglobal.ResizeObserver = class MockResize {\n\t\tprivate _cb: ResizeObserverCallback;\n\t\tprivate _ref: any;\n\t\tconstructor(cb: any) {\n\t\t\tthis._cb = cb;\n\t\t}\n\t\tpublic observe(ref: any) {\n\t\t\tthis._ref = ref;\n\t\t\trefMap.set(ref, this);\n\t\t\tthis._cb([{ contentRect: ref, target: this._ref }], this);\n\t\t}\n\t\tpublic unobserve() {}\n\n\t\tpublic disconnect() {}\n\n\t\tpublic resize(contentRect: DOMRectReadOnly) {\n\t\t\tthis._cb([{ contentRect, target: this._ref }], this);\n\t\t}\n\t};\n\n\tfunction mockResize(): MiddlewareResult<any, any, any>;\n\tfunction mockResize(key: string, contentRect: Partial<DOMRectReadOnly>): void;\n\tfunction mockResize(key?: string, contentRect?: Partial<DOMRectReadOnly>): void | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (!mockNodes[key]) {\n\t\t\t\tmockNodes[key] = contentRect;\n\t\t\t}\n\t\t\tconst ref = mockNodes[key];\n\t\t\tconst mock = refMap.get(ref);\n\t\t\tif (mock) {\n\t\t\t\tmock.resize(contentRect);\n\t\t\t} else {\n\t\t\t\tinvalidate && invalidate();\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockResizeFactory();\n\t\t}\n\t}\n\n\treturn mockResize;\n}\n\nexport default createResizeMock;\n"]}