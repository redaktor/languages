import global from '../../../shim/global';
import { create, destroy, invalidator } from '../../../core/vdom';
import icache from '../../../core/middleware/icache';
import resize from '../../../core/middleware/resize';
export function createResizeMock() {
    const mockNodes = {};
    const refMap = new Map();
    const mockNode = {
        get(key) {
            return mockNodes[key];
        }
    };
    let invalidate;
    const factory = create({ destroy, icache, invalidator });
    const mockResizeFactory = factory(({ id, middleware, properties, children }) => {
        const { callback } = resize();
        invalidate = middleware.invalidator;
        return callback({
            id,
            middleware: { destroy: middleware.destroy, icache: middleware.icache, node: mockNode },
            properties,
            children
        });
    });
    global.ResizeObserver = class MockResize {
        constructor(cb) {
            this._cb = cb;
        }
        observe(ref) {
            this._ref = ref;
            refMap.set(ref, this);
            this._cb([{ contentRect: ref, target: this._ref }], this);
        }
        unobserve() { }
        disconnect() { }
        resize(contentRect) {
            this._cb([{ contentRect, target: this._ref }], this);
        }
    };
    function mockResize(key, contentRect) {
        if (key) {
            if (!mockNodes[key]) {
                mockNodes[key] = contentRect;
            }
            const ref = mockNodes[key];
            const mock = refMap.get(ref);
            if (mock) {
                mock.resize(contentRect);
            }
            else {
                invalidate && invalidate();
            }
        }
        else {
            return mockResizeFactory();
        }
    }
    return mockResize;
}
export default createResizeMock;
//# sourceMappingURL=resize.mjs.map