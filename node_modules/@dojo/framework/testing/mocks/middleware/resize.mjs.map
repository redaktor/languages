{"version":3,"file":"resize.mjs","sourceRoot":"","sources":["resize.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,MAAM,MAAM,iCAAiC,CAAC;AACrD,OAAO,MAAM,MAAM,iCAAiC,CAAC;AAGrD,MAAM,UAAU,gBAAgB;IAC/B,MAAM,SAAS,GAAQ,EAAE,CAAC;IAC1B,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,MAAM,QAAQ,GAAG;QAChB,GAAG,CAAC,GAAW;YACd,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;KACD,CAAC;IACF,IAAI,UAAkC,CAAC;IAEvC,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAEzD,MAAM,iBAAiB,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;QAC9E,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,EAAE,CAAC;QAC9B,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,OAAO,QAAQ,CAAC;YACf,EAAE;YACF,UAAU,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;YACtF,UAAU;YACV,QAAQ;SACR,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,GAAG,MAAM,UAAU;QAGvC,YAAY,EAAO;YAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,CAAC;QACM,OAAO,CAAC,GAAQ;YACtB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;QACM,SAAS,KAAI,CAAC;QAEd,UAAU,KAAI,CAAC;QAEf,MAAM,CAAC,WAA4B;YACzC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC;KACD,CAAC;IAIF,SAAS,UAAU,CAAC,GAAY,EAAE,WAAsC;QACvE,IAAI,GAAG,EAAE;YACR,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;aAC7B;YACD,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,IAAI,EAAE;gBACT,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACzB;iBAAM;gBACN,UAAU,IAAI,UAAU,EAAE,CAAC;aAC3B;SACD;aAAM;YACN,OAAO,iBAAiB,EAAE,CAAC;SAC3B;IACF,CAAC;IAED,OAAO,UAAU,CAAC;AACnB,CAAC;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["import global from '../../../shim/global';\nimport { create, destroy, invalidator } from '../../../core/vdom';\nimport icache from '../../../core/middleware/icache';\nimport resize from '../../../core/middleware/resize';\nimport { MiddlewareResult } from '../../../core/interfaces';\n\nexport function createResizeMock() {\n\tconst mockNodes: any = {};\n\tconst refMap = new Map();\n\tconst mockNode = {\n\t\tget(key: string) {\n\t\t\treturn mockNodes[key];\n\t\t}\n\t};\n\tlet invalidate: () => void | undefined;\n\n\tconst factory = create({ destroy, icache, invalidator });\n\n\tconst mockResizeFactory = factory(({ id, middleware, properties, children }) => {\n\t\tconst { callback } = resize();\n\t\tinvalidate = middleware.invalidator;\n\t\treturn callback({\n\t\t\tid,\n\t\t\tmiddleware: { destroy: middleware.destroy, icache: middleware.icache, node: mockNode },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t});\n\n\tglobal.ResizeObserver = class MockResize {\n\t\tprivate _cb: ResizeObserverCallback;\n\t\tprivate _ref: any;\n\t\tconstructor(cb: any) {\n\t\t\tthis._cb = cb;\n\t\t}\n\t\tpublic observe(ref: any) {\n\t\t\tthis._ref = ref;\n\t\t\trefMap.set(ref, this);\n\t\t\tthis._cb([{ contentRect: ref, target: this._ref }], this);\n\t\t}\n\t\tpublic unobserve() {}\n\n\t\tpublic disconnect() {}\n\n\t\tpublic resize(contentRect: DOMRectReadOnly) {\n\t\t\tthis._cb([{ contentRect, target: this._ref }], this);\n\t\t}\n\t};\n\n\tfunction mockResize(): MiddlewareResult<any, any, any>;\n\tfunction mockResize(key: string, contentRect: Partial<DOMRectReadOnly>): void;\n\tfunction mockResize(key?: string, contentRect?: Partial<DOMRectReadOnly>): void | MiddlewareResult<any, any, any> {\n\t\tif (key) {\n\t\t\tif (!mockNodes[key]) {\n\t\t\t\tmockNodes[key] = contentRect;\n\t\t\t}\n\t\t\tconst ref = mockNodes[key];\n\t\t\tconst mock = refMap.get(ref);\n\t\t\tif (mock) {\n\t\t\t\tmock.resize(contentRect);\n\t\t\t} else {\n\t\t\t\tinvalidate && invalidate();\n\t\t\t}\n\t\t} else {\n\t\t\treturn mockResizeFactory();\n\t\t}\n\t}\n\n\treturn mockResize;\n}\n\nexport default createResizeMock;\n"]}