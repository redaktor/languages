{"version":3,"file":"store.js","sourceRoot":"","sources":["store.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,2CAAkE;IAClE,8DAAyD;IACzD,wDAAuE;IACvE,+CAA0D;IAK1D,IAAM,OAAO,GAAG,aAAM,CAAC,EAAE,OAAO,gBAAA,EAAE,WAAW,oBAAA,EAAE,QAAQ,oBAAA,EAAE,CAAC,CAAC;IAE3D,SAAgB,yBAAyB,CAAU,SAA0C;QAA1C,0BAAA,EAAA,cAA0C;QAC5F,IAAM,KAAK,GAAG,6BAAqB,EAAE,CAAC;QACtC,IAAM,SAAS,GAAG,IAAI,eAAK,EAAK,CAAC;QACjC,IAAM,cAAc,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAM,YAAY,GAAG;YACpB,GAAG,EAAE;gBACJ,OAAO,SAAS,CAAC;YAClB,CAAC;YACD,SAAS,EAAE,cAAY,CAAC;SACxB,CAAC;QACF,IAAM,mBAAmB,GAAG,OAAO,CAAC,UAAC,EAAkE;gBAAhE,0BAAU,EAAE,kBAAoC,EAAtB,oBAAO,EAAE,4BAAW,EAAI,sBAAQ,EAAE,UAAE;YAC5F,IAAA,2BAAQ,CAAa;YAC7B,IAAM,IAAI,GAAG,QAAQ,CAAC;gBACrB,EAAE,IAAA;gBACF,UAAU,EAAE,EAAE,OAAO,SAAA,EAAE,WAAW,aAAA,EAAE,QAAQ,EAAE,YAAY,EAAE;gBAC5D,UAAU,YAAA;gBACV,QAAQ,UAAA;aACR,CAAC,CAAC;YACH,OAAO;gBACN,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBACxB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC1B,QAAQ,EAAE,UAA8B,OAAU;oBACjD,IAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACzC,IAAI,IAAI,EAAE;wBACT,OAAO,IAAI,CAAC;qBACZ;oBACD,OAAO,CAAC,cAAO,CAAC,CAAQ,CAAC;gBAC1B,CAAC;gBACD,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;aACtB,CAAC;QACH,CAAC,CAAC,CAAC;QAIH,SAAS,SAAS,CAAC,UAA4C;YAC9D,IAAI,UAAU,EAAE;gBACf,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;aAClD;iBAAM;gBACN,OAAO,mBAAmB,EAAE,CAAC;aAC7B;QACF,CAAC;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IA1CD,8DA0CC;IAED,kBAAe,yBAAyB,CAAC","sourcesContent":["import { create, destroy, invalidator } from '../../../core/vdom';\nimport injector from '../../../core/middleware/injector';\nimport { createStoreMiddleware } from '../../../core/middleware/store';\nimport Store, { StatePaths } from '../../../stores/Store';\nimport { MiddlewareResult } from '../../../core/interfaces';\nimport { PatchOperation } from '../../../stores/state/Patch';\nimport { Process } from '../../../stores/process';\n\nconst factory = create({ destroy, invalidator, injector });\n\nexport function createMockStoreMiddleware<T = any>(processes: [Process<any, any>, any][] = []) {\n\tconst store = createStoreMiddleware();\n\tconst storeMock = new Store<T>();\n\tconst processMockMap = new Map(processes);\n\tconst injectorStub = {\n\t\tget: (): any => {\n\t\t\treturn storeMock;\n\t\t},\n\t\tsubscribe: (): any => {}\n\t};\n\tconst mockStoreMiddleware = factory(({ properties, middleware: { destroy, invalidator }, children, id }) => {\n\t\tconst { callback } = store();\n\t\tconst mock = callback({\n\t\t\tid,\n\t\t\tmiddleware: { destroy, invalidator, injector: injectorStub },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t\treturn {\n\t\t\tget: mock.get.bind(mock),\n\t\t\tpath: mock.path.bind(mock),\n\t\t\texecutor: <T extends Process<any, any>>(process: T): ReturnType<T> => {\n\t\t\t\tconst mock = processMockMap.get(process);\n\t\t\t\tif (mock) {\n\t\t\t\t\treturn mock;\n\t\t\t\t}\n\t\t\t\treturn (() => {}) as any;\n\t\t\t},\n\t\t\tat: mock.at.bind(mock)\n\t\t};\n\t});\n\n\tfunction mockStore(): MiddlewareResult<any, any, any>;\n\tfunction mockStore(operations: (path: StatePaths<T>) => PatchOperation[]): void;\n\tfunction mockStore(operations?: (path: any) => PatchOperation[]): void | MiddlewareResult<any, any, any> {\n\t\tif (operations) {\n\t\t\tstoreMock.apply(operations(storeMock.path), true);\n\t\t} else {\n\t\t\treturn mockStoreMiddleware();\n\t\t}\n\t}\n\treturn mockStore;\n}\n\nexport default createMockStoreMiddleware;\n"]}