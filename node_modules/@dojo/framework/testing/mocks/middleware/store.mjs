import { create, destroy, invalidator } from '../../../core/vdom';
import injector from '../../../core/middleware/injector';
import { createStoreMiddleware } from '../../../core/middleware/store';
import Store from '../../../stores/Store';
const factory = create({ destroy, invalidator, injector });
export function createMockStoreMiddleware(processes = []) {
    const store = createStoreMiddleware();
    const storeMock = new Store();
    const processMockMap = new Map(processes);
    const injectorStub = {
        get: () => {
            return storeMock;
        },
        subscribe: () => { }
    };
    const mockStoreMiddleware = factory(({ properties, middleware: { destroy, invalidator }, children, id }) => {
        const { callback } = store();
        const mock = callback({
            id,
            middleware: { destroy, invalidator, injector: injectorStub },
            properties,
            children
        });
        return {
            get: mock.get.bind(mock),
            path: mock.path.bind(mock),
            executor: (process) => {
                const mock = processMockMap.get(process);
                if (mock) {
                    return mock;
                }
                return (() => { });
            },
            at: mock.at.bind(mock)
        };
    });
    function mockStore(operations) {
        if (operations) {
            storeMock.apply(operations(storeMock.path), true);
        }
        else {
            return mockStoreMiddleware();
        }
    }
    return mockStore;
}
export default createMockStoreMiddleware;
//# sourceMappingURL=store.mjs.map