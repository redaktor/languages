{"version":3,"file":"store.mjs","sourceRoot":"","sources":["store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,QAAQ,MAAM,mCAAmC,CAAC;AACzD,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AACvE,OAAO,KAAqB,MAAM,uBAAuB,CAAC;AAK1D,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;AAE3D,MAAM,UAAU,yBAAyB,CAAU,YAAwC,EAAE;IAC5F,MAAM,KAAK,GAAG,qBAAqB,EAAE,CAAC;IACtC,MAAM,SAAS,GAAG,IAAI,KAAK,EAAK,CAAC;IACjC,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;IAC1C,MAAM,YAAY,GAAG;QACpB,GAAG,EAAE,GAAQ,EAAE;YACd,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,SAAS,EAAE,GAAQ,EAAE,GAAE,CAAC;KACxB,CAAC;IACF,MAAM,mBAAmB,GAAG,OAAO,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE;QAC1G,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,CAAC;QAC7B,MAAM,IAAI,GAAG,QAAQ,CAAC;YACrB,EAAE;YACF,UAAU,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE;YAC5D,UAAU;YACV,QAAQ;SACR,CAAC,CAAC;QACH,OAAO;YACN,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1B,QAAQ,EAAE,CAA8B,OAAU,EAAiB,EAAE;gBACpE,MAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzC,IAAI,IAAI,EAAE;oBACT,OAAO,IAAI,CAAC;iBACZ;gBACD,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAQ,CAAC;YAC1B,CAAC;YACD,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;SACtB,CAAC;IACH,CAAC,CAAC,CAAC;IAIH,SAAS,SAAS,CAAC,UAA4C;QAC9D,IAAI,UAAU,EAAE;YACf,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;SAClD;aAAM;YACN,OAAO,mBAAmB,EAAE,CAAC;SAC7B;IACF,CAAC;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,eAAe,yBAAyB,CAAC","sourcesContent":["import { create, destroy, invalidator } from '../../../core/vdom';\nimport injector from '../../../core/middleware/injector';\nimport { createStoreMiddleware } from '../../../core/middleware/store';\nimport Store, { StatePaths } from '../../../stores/Store';\nimport { MiddlewareResult } from '../../../core/interfaces';\nimport { PatchOperation } from '../../../stores/state/Patch';\nimport { Process } from '../../../stores/process';\n\nconst factory = create({ destroy, invalidator, injector });\n\nexport function createMockStoreMiddleware<T = any>(processes: [Process<any, any>, any][] = []) {\n\tconst store = createStoreMiddleware();\n\tconst storeMock = new Store<T>();\n\tconst processMockMap = new Map(processes);\n\tconst injectorStub = {\n\t\tget: (): any => {\n\t\t\treturn storeMock;\n\t\t},\n\t\tsubscribe: (): any => {}\n\t};\n\tconst mockStoreMiddleware = factory(({ properties, middleware: { destroy, invalidator }, children, id }) => {\n\t\tconst { callback } = store();\n\t\tconst mock = callback({\n\t\t\tid,\n\t\t\tmiddleware: { destroy, invalidator, injector: injectorStub },\n\t\t\tproperties,\n\t\t\tchildren\n\t\t});\n\t\treturn {\n\t\t\tget: mock.get.bind(mock),\n\t\t\tpath: mock.path.bind(mock),\n\t\t\texecutor: <T extends Process<any, any>>(process: T): ReturnType<T> => {\n\t\t\t\tconst mock = processMockMap.get(process);\n\t\t\t\tif (mock) {\n\t\t\t\t\treturn mock;\n\t\t\t\t}\n\t\t\t\treturn (() => {}) as any;\n\t\t\t},\n\t\t\tat: mock.at.bind(mock)\n\t\t};\n\t});\n\n\tfunction mockStore(): MiddlewareResult<any, any, any>;\n\tfunction mockStore(operations: (path: StatePaths<T>) => PatchOperation[]): void;\n\tfunction mockStore(operations?: (path: any) => PatchOperation[]): void | MiddlewareResult<any, any, any> {\n\t\tif (operations) {\n\t\t\tstoreMock.apply(operations(storeMock.path), true);\n\t\t} else {\n\t\t\treturn mockStoreMiddleware();\n\t\t}\n\t}\n\treturn mockStore;\n}\n\nexport default createMockStoreMiddleware;\n"]}