{"version":3,"file":"assertRender.js","sourceRoot":"","sources":["assertRender.ts"],"names":[],"mappings":"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","sourcesContent":["import { DNode, WNode, VNode, DefaultWidgetBaseInterface, Constructor } from '../../core/interfaces';\nimport * as diff from 'diff';\nimport WeakMap from '../../shim/WeakMap';\nimport Set from '../../shim/Set';\nimport Map from '../../shim/Map';\nimport { from as arrayFrom } from '../../shim/array';\nimport { isVNode, isWNode } from '../../core/vdom';\nimport { Ignore } from '../assertionTemplate';\n\nlet widgetClassCounter = 0;\nconst widgetMap = new WeakMap<Constructor<DefaultWidgetBaseInterface>, number>();\n\nfunction replacer(key: string, value: any): any {\n\tif (typeof value === 'function') {\n\t\treturn 'function';\n\t} else if (typeof value === 'undefined') {\n\t\treturn 'undefined';\n\t} else if (value instanceof Set || value instanceof Map) {\n\t\treturn arrayFrom(value);\n\t}\n\treturn value;\n}\n\nexport function formatDNodes(nodes: DNode | DNode[], depth: number = 0): string {\n\tconst isArrayFragment = Array.isArray(nodes) && depth === 0;\n\tlet initial = isArrayFragment ? '[\\n' : '';\n\tlet tabs = '';\n\tdepth = isArrayFragment ? 1 : depth;\n\tnodes = Array.isArray(nodes) ? nodes : [nodes];\n\n\tfor (let i = 0; i < depth; i++) {\n\t\ttabs = `${tabs}\\t`;\n\t}\n\tlet requiresCarriageReturn = false;\n\tlet formattedNode = nodes.reduce((result: string, node, index) => {\n\t\tif (!node || node === true) {\n\t\t\treturn result;\n\t\t}\n\t\tif (requiresCarriageReturn) {\n\t\t\tresult = `${result}\\n`;\n\t\t} else {\n\t\t\trequiresCarriageReturn = true;\n\t\t}\n\t\tresult = `${result}${tabs}`;\n\n\t\tif (typeof node === 'string') {\n\t\t\treturn `${result}\"${node}\"`;\n\t\t}\n\n\t\tif (isVNode(node) && node.text) {\n\t\t\treturn `${result}\"${node.text}\"`;\n\t\t}\n\n\t\tresult = `${result}${formatNode(node, tabs)}`;\n\t\tif (node.children && node.children.some((child) => !!child)) {\n\t\t\tresult = `${result}, [\\n${formatDNodes(node.children, depth + 1)}\\n${tabs}]`;\n\t\t}\n\t\treturn `${result})`;\n\t}, initial);\n\n\treturn isArrayFragment ? (formattedNode = `${formattedNode}\\n]`) : formattedNode;\n}\n\nfunction formatProperties(properties: any, tabs: string): string {\n\tproperties = Object.keys(properties)\n\t\t.sort()\n\t\t.reduce((props: any, key) => {\n\t\t\tprops[key] = properties[key];\n\t\t\treturn props;\n\t\t}, {});\n\tproperties = JSON.stringify(properties, replacer, `${tabs}\\t`).slice(0, -1);\n\treturn `${properties}${tabs}}`;\n}\n\nfunction getWidgetName(widgetConstructor: any): string {\n\tlet name: string;\n\tif (typeof widgetConstructor === 'string' || typeof widgetConstructor === 'symbol') {\n\t\tname = widgetConstructor.toString();\n\t} else {\n\t\tname = widgetConstructor.name;\n\t\tif (name === undefined) {\n\t\t\tlet id = widgetMap.get(widgetConstructor);\n\t\t\tif (id === undefined) {\n\t\t\t\tid = ++widgetClassCounter;\n\t\t\t\twidgetMap.set(widgetConstructor, id);\n\t\t\t}\n\t\t\tname = `Widget-${id}`;\n\t\t}\n\t}\n\treturn name;\n}\n\nfunction formatNode(node: WNode | VNode, tabs: any): string {\n\tconst propertyKeyCount = Object.keys(node.properties).length;\n\tlet properties = propertyKeyCount > 0 ? formatProperties(node.properties, tabs) : '{}';\n\tif (isWNode(node)) {\n\t\treturn `w(${getWidgetName(node.widgetConstructor)}, ${properties}`;\n\t}\n\treturn `v(\"${node.tag}\", ${properties}`;\n}\n\nfunction isNode(node: any): node is VNode | WNode {\n\treturn isVNode(node) || isWNode(node);\n}\n\nfunction decorate(actual: DNode | DNode[], expected: DNode | DNode[]): [DNode[], DNode[]] {\n\tactual = Array.isArray(actual) ? actual : [actual];\n\texpected = Array.isArray(expected) ? expected : [expected];\n\tlet actualDecoratedNodes = [];\n\tlet expectedDecoratedNodes = [];\n\tconst length = actual.length > expected.length ? actual.length : expected.length;\n\tfor (let i = 0; i < length; i++) {\n\t\tlet actualNode = actual[i];\n\t\tlet expectedNode = expected[i];\n\n\t\tif (expectedNode && (expectedNode as any).widgetConstructor === Ignore) {\n\t\t\texpectedNode = actualNode || expectedNode;\n\t\t}\n\n\t\tif (isNode(expectedNode)) {\n\t\t\tif (typeof expectedNode.properties === 'function') {\n\t\t\t\tconst actualProperties = isNode(actualNode) ? actualNode.properties : {};\n\t\t\t\texpectedNode.properties = (expectedNode as any).properties(actualProperties);\n\t\t\t}\n\t\t}\n\t\tconst childrenA = isNode(actualNode) ? actualNode.children : [];\n\t\tconst childrenB = isNode(expectedNode) ? expectedNode.children : [];\n\n\t\tconst [actualChildren, expectedChildren] = decorate(childrenA, childrenB);\n\t\tif (isNode(actualNode)) {\n\t\t\tactualNode.children = actualChildren;\n\t\t}\n\t\tif (isNode(expectedNode)) {\n\t\t\texpectedNode.children = expectedChildren;\n\t\t}\n\t\tactualDecoratedNodes.push(actualNode);\n\t\texpectedDecoratedNodes.push(expectedNode);\n\t}\n\treturn [actualDecoratedNodes, expectedDecoratedNodes];\n}\n\nexport function assertRender(actual: DNode | DNode[], expected: DNode | DNode[], message?: string): void {\n\tconst [decoratedActual, decoratedExpected] = decorate(actual, expected);\n\tconst parsedActual = formatDNodes(Array.isArray(actual) ? decoratedActual : decoratedActual[0]);\n\tconst parsedExpected = formatDNodes(Array.isArray(expected) ? decoratedExpected : decoratedExpected[0]);\n\tconst diffResult = diff.diffLines(parsedActual, parsedExpected);\n\tlet diffFound = false;\n\tconst parsedDiff = diffResult.reduce((result: string, part, index) => {\n\t\tif (part.added) {\n\t\t\tdiffFound = true;\n\t\t\tresult = `${result}(E)${part.value.replace(/\\n\\t/g, '\\n(E)\\t')}`;\n\t\t} else if (part.removed) {\n\t\t\tdiffFound = true;\n\t\t\tresult = `${result}(A)${part.value.replace(/\\n\\t/g, '\\n(A)\\t')}`;\n\t\t} else {\n\t\t\tresult = `${result}${part.value}`;\n\t\t}\n\t\treturn result;\n\t}, '\\n');\n\n\tif (diffFound) {\n\t\tthrow new Error(parsedDiff);\n\t}\n}\n\nexport default assertRender;\n"]}